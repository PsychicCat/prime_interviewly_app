var app = angular.module('app', ['ngMaterial', 'ngRoute', 'ui.grid', 'ui.grid.edit', 'ui.grid.rowEdit', 'ui.grid.exporter']);

// Angular routing
app.config(['$routeProvider', '$locationProvider', '$mdThemingProvider', function($routeProvider, $locationProvider, $mdThemingProvider){


    $mdThemingProvider.theme('default')
        .primaryPalette('blue-grey')
        .accentPalette('orange');

    $locationProvider.html5Mode({
        enabled: true
    });
    $routeProvider.
        when('/home', {
            templateUrl: 'views/partials/home.html'
        }).
        when('/', {
            templateUrl: 'views/partials/login/login.html'
        }).
        when('/forgot', {
            templateUrl: 'views/partials/forgot/forgot.html'
        }).
        when('/events', {
            templateUrl: 'views/partials/events/events.html'
        }).
        when('/students', {
            templateUrl: 'views/partials/students/students.html'
        }).
        when('/interviewers', {
            templateUrl: 'views/partials/interviewers/interviewers.html'
        }).
        when('/archived-events', {
            templateUrl: 'views/partials/archived-events/archived-events.html'
        }).
        when('/profile', {
            templateUrl: 'views/partials/profile/profile.html'
        }).
        when('/logout', {
            templateUrl: 'views/partials/logout/logout.html'
        }).
        when('/new-event', {
            templateUrl: 'views/partials/new-event/new-event.html'
        }).
        when('/event', {
            templateUrl: 'views/partials/event/event.html'
        }).
        when('/reset/:token', {
            templateUrl: 'views/partials/reset/reset.html',
            controller: 'reset'
        }).
        otherwise({
            redirectTo: '/views/partials/login.html'
    })
}]);

// Toolbar controller
app.controller('toolbar', ['$rootScope','$location','$scope', '$window', function($rootScope, $location, $scope, $window){
    $scope.paths = true;
    $rootScope.$on('logged In', function(){
        if($window.sessionStorage.token == undefined){
            $scope.paths = true;
        }else{
            $scope.paths = false;
            $scope.user = {
                username: $window.sessionStorage.username.replace(/^"(.*)"$/, '$1')
            };
        }
    })
    $scope.goHome = function(){
        $location.path('/');
    }
}]);

// Directive to check the passwords are the same
app.directive('verifySame', function(){
       return {
           require: "ngModel",
           scope: {
               otherModelValue: "=compareTo"
           },
           link: function(scope, element, attributes, ngModel) {
               ngModel.$validators.compareTo = function(modelValue) {
                   return modelValue == scope.otherModelValue;
               };
               scope.$watch("password", function() {
                   ngModel.$validate();
               });
           }
       };
});

// Archived events controller

// Generate event controller
app.controller('generateCtrl', ['$scope', '$http', function($scope, $http) {

    // time experiments
    var startTime = moment('1:00 PM', 'h:mm A').format('HH:mm');
    var endTime = moment('4:00 PM', 'h:mm A').format('HH:mm');
    var eventLength = moment(endTime, 'HH:mm').diff(moment(startTime, 'HH:mm'), 'minutes');
    var slotLength = moment.duration((eventLength / 9), 'minutes').asMinutes();
    console.log(moment(startTime, 'HH:mm').add((slotLength * 8), 'minutes').format('h:mm A'));

    // Initialize UI Grid variables
    var gridCols = [];
    var gridData = [];

    // UI Grid options
    $scope.gridOptions = {
        enableSorting: false,
        enableGridMenu: true,
        enableFiltering: false,
        onRegisterApi: function (gridApi) {
            $scope.gridApi = gridApi;
        }
    };

    // "Generate" button click function
    $scope.generate = function () {

        // request matches from server given event settings
        $http({
            method: 'GET',
            url: 'http://localhost:3000/test'
        }).then(function successCallback(response) {

            // empty the UI Grid variables in case there is data
            $scope.gridOptions.columnDefs = [];
            $scope.gridOptions.data = [];
            gridCols = [];
            gridData = [];

            // console log API response for debugging
            console.log(response);

            // iterate over the interviewer array within the response
            // create various arrays and objects to meet UI Grid data requirements
            response.data.interviewer.forEach(function(item, pos) {

                // push the company and interviewer name into the column names array
                // this will be the column header for a particular interviewer
                gridCols.push({name: item.company + ' / ' + item.fName, field: item.company + '_' + item.name, width:150, displayName: item.company + ' / ' + item.fName});

                // set the scheduled object to a variable
                // this object contains the entire schedule for an interviewer
                var sched = item.scheduled;

                // initiate an empty students array
                // this will be used to store the formatted schedule for each company
                var students = [];

                // iterate over the scheduled object using the getOwnPropertyNames method
                Object.getOwnPropertyNames(sched).forEach(function (elem, index, array) {
                    // create an array of objects that contains each scheduled item
                    // this array will contain the formatted schedule for an interviewer
                    titleObj = {};
                    titleObj[item.company + '_' + item.fname] = sched[elem];
                    students.push(titleObj);
            });

            // push the updated schedule array into the master gridData array
            gridData.push(students);
            });

            // gridData is still not correctly formatted
            // each item represents an interviewer column
            // when in fact, UI Grid requires each item in the array to be a row of data
            // Underscore unzip function performs necessary matrix transformation
            gridData = _.unzip(gridData);

            // initiate empty array to store each row as an object of objects
            var gridArr = [];

            // iterate over unzipped gridData
            gridData.forEach(function (item, pos) {

                // initiate empty object for storing individual schedule items
                var rowObj = {};

                // iterate over the schedule row
                // each item in the row array represents a single cell in the grid
                item.forEach(function (elem, index) {
                    // use Underscore extend method to "push" each item into row object
                    _.extend(rowObj, elem);
                });

                // push the row object into the previously initiated grid array
                gridArr.push(rowObj);
            });

            // initiate an empty object for storing the entire schedule
            gridObj = {};

            // create time slots column
            var timeSlots = [];
            var slotsSize = gridArr.length;
            while(slotsSize--) {
                timeSlots.push({time: 'Slot ' + ((gridArr.length) - slotsSize)});
            }

            console.log(timeSlots);

            // using Underscore extend again, "push" the array of objects into the master object
            _.extend(gridObj, gridArr);

            // update the gridData variable
            gridData = gridArr;
        }).then(function() {

            // after capturing and formatting the data, update UI Grid options
            $scope.gridOptions.columnDefs = gridCols;
            $scope.gridOptions.data = gridData;
        })
    };
}]);

// Events controller
app.controller('eventsCtrl', function($scope) {
        this.tiles = buildGridModel({
            title: "Event Title",
            background: ""
        });
        function buildGridModel(tileTmpl){
            var it, results = [ ];
                it = angular.extend({},tileTmpl);
                it.title = it.title;
                it.span  = { row : 1, col : 1 };
                it.background = "gray";
                it.span.row = it.span.col = 1;

                results.push(it);

            return results;
        }
    });


// Forgot controller
app.controller('sendEmail', ['$scope', '$http', '$location', function($scope, $http, $location){
    $scope.send = function(email) {
        $http.post('/forgot', {email: email}).then(function (response) {
            if (response.status == 200) {
                $location.path('/')
            }
        })
    }
}]);

// Interviewers controller


// Login controller
app.controller('login', ['$rootScope','$scope', '$http', '$location', '$mdToast', function($rootScope, $scope, $http, $location, $mdToast){
    $scope.submit = function(username, password){
        $http.post('/authenticate', {username: username, password: password}).then(function(response){
                if(response.data.token){
                    sessionStorage.username = angular.toJson(response.data.user.username);
                    sessionStorage.email = angular.toJson(response.data.user.email);
                    sessionStorage.token = angular.toJson(response.data.token);
                    $location.path('/events');
                    $rootScope.$broadcast('logged In')
                }else{
                    $mdToast.showSimple(response.data.error)
                }

            }

        )
    }
}]);

// Profile controller
app.controller('profile', ['$scope', '$http', '$window', '$location', function($scope, $http, $window, $location){
    $scope.username = $window.sessionStorage.username.replace(/^"(.*)"$/, '$1');
    $scope.email = $window.sessionStorage.email.replace(/^"(.*)"$/, '$1');
    $scope.save = function(password){
        var username = $scope.username;
        var email = $scope.email;
        $http.post('/change', {username: username, email: email, password: password}).then(function(response){
            if(response.status === 200){
                $location.path('/events')
            }
        });
    }
}]);

// Logout controller
app.controller('logout', ['$rootScope', '$scope','$location', '$interval', function($rootScope, $scope, $location, $interval){
    $scope.logout = function(){
        $location.path('/logout');
        sessionStorage.clear();
        $rootScope.$broadcast('logged In');
        $interval(function() {
            $location.path('/')
        }, 3000, 1)
    };
}]);

// Students controller


// Interviewer dialog controller
app.controller('interviewer', ['$scope', '$mdDialog', function($scope, $mdDialog){
    $scope.openInterviewer = function(ev){
        $mdDialog.show({
            controller: addInterviewer,
            templateUrl: 'views/partials/dialogs/interviewer/interviewer.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose: true
        })
    };
    function addInterviewer($scope){
        $scope.close = function() {
            $mdDialog.hide();
            $scope.cohorts = [
                {name: 'Delta'},
                {name: 'gamma'},
                {name: 'Epsilon'}
            ];
            $scope.events = [
                {name: 'mocks Delta'},
                {name: 'career Delta'},
                {name: 'mocks Epsilon'}
            ];
        }
    }
}]);

// Register dialog controller
app.controller('registerOpen', ['$scope', '$mdDialog', '$http', function($scope, $mdDialog){
    $scope.openRegister = function(ev){
        $mdDialog.show({
            controller: register,
            templateUrl: 'views/partials/dialogs/register/register.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose: true
        })
    };
    function register($scope, $http, $mdDialog) {
        $scope.register = function(username, email, password){
            $http.post('/api/users', {
                username: username,
                email: email,
                password: password
            }).then(function(response){
                console.log(response);
                if(response == 200) {
                    $mdDialog.hide()
                }
            });
        };
        $scope.close = function(){
            $mdDialog.hide();
        };
    }
}]);

// Student dialog controller
app.controller('student', ['$scope', '$mdDialog', function($scope,$mdDialog){
    $scope.openStudents = function(ev){
        $mdDialog.show({
            controller: addStudent,
            templateUrl: 'views/partials/dialogs/student/student.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose: true
        })
    };
    function addStudent($scope) {
        $scope.close = function () {
            $mdDialog.hide();
            $scope.companies = [
                {name: 'Prime'},
                {name: 'Nerdery'},
                {name: 'Digital People'}
            ];
            $scope.events = [
                {name: 'mocks Delta'},
                {name: 'career Delta'},
                {name: 'mocks Epsilon'}
            ];
        }
    }

}]);

// Student dialog controller
app.controller('uploads', ['$scope', '$mdDialog', function($scope, $mdDialog){
    $scope.openUploads = function(ev){
        $mdDialog.show({
            controller: uploadFile,
            templateUrl: 'views/partials/dialogs/upload/upload.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose: true
        })
    };
    function uploadFile($scope, $mdDialog){
        $scope.close = function() {
            $mdDialog.hide();
        }
    }
}]);

// New event controller
app.controller('newEventCtrl', ['$scope', '$http', function($scope, $http) {

}]);

// Reset controller
app.controller('reset',['$scope', '$http', '$routeParams', '$location', function($scope, $http, $routeParams, $location){
    $scope.changePass = function(password, confirm){
        console.log(password);
        var token = $routeParams.token;
        if(password === confirm){
            $http.post('/reset', {password: password, token: token}).then(function(response){
                console.log(response);
                if(response.status === 200){
                    $location.path('/');
                }
            })
        }
    }
}]);
//# sourceMappingURL=data:application/json;base64,
