var app = angular.module('app', ['ngMaterial', 'ngRoute', 'ngMessages', 'ui.grid', 'ui.grid.edit', 'ui.grid.rowEdit', 'ui.grid.exporter']);

/*
 Angular configuration
 */
app.config(['$routeProvider', '$locationProvider', '$mdThemingProvider', function($routeProvider, $locationProvider, $mdThemingProvider){

    // Color palette
    $mdThemingProvider.theme('default')
        .primaryPalette('blue-grey')
        .accentPalette('orange');

    // HTML5 mode
    $locationProvider.html5Mode({
        enabled: true
    });

    // Routes
    $routeProvider.
        when('/home', {
            templateUrl: 'views/partials/home/home.html'
        }).
        when('/', {
            templateUrl: 'views/partials/account/login/login.html'
        }).
        when('/forgot', {
            templateUrl: 'views/partials/account/forgot/forgot.html'
        }).
        when('/events', {
            templateUrl: 'views/partials/events/events-list/events-list.html'
        }).
        when('/event?:eventId', {
            templateUrl: 'views/partials/events/view-event/view-event.html'
        }).
        when('/students', {
            templateUrl: 'views/partials/students/students.html'
        }).
        when('/interviewers', {
            templateUrl: 'views/partials/interviewers/interviewers.html'
        }).
        when('/archived-events', {
            templateUrl: 'views/partials/events/archived-events/archived-events.html'
        }).
        when('/profile', {
            templateUrl: 'views/partials/account/profile/profile.html'
        }).
        when('/logout', {
            templateUrl: 'views/partials/account/logout/logout.html'
        }).
        when('/new-event', {
            templateUrl: 'views/partials/events/new-event/new-event.html'
        }).
        when('/reset/:token', {
            templateUrl: 'views/partials/account/reset/reset.html',
            controller: 'reset'
        }).
        otherwise({
            redirectTo: '/'
    })
}]);

/*
Toolbar controller
 */
app.controller('toolbar', ['$rootScope','$location','$scope', '$window', function($rootScope, $location, $scope, $window){
    $scope.paths = true;
    $rootScope.$on('logged In', function(){
        if($window.sessionStorage.token == undefined){
            $scope.paths = true;
        }else{
            $scope.paths = false;
            $scope.user = {
                username: $window.sessionStorage.username.replace(/^"(.*)"$/, '$1')
            };
        }
    });
    $scope.goHome = function(){
        $location.path('/');
    }
}]);

/*
Directive to check the passwords are the same
 */
app.directive("passwordVerify", function() {
    return {
        require: "ngModel",
        scope: {
            passwordVerify: '='
        },
        link: function(scope, element, attrs, ctrl) {
            scope.$watch(function() {
                var combined;
                if (scope.passwordVerify || ctrl.$viewValue) {
                    combined = scope.passwordVerify + '_' + ctrl.$viewValue;
                }
                return combined;
            }, function(value) {
                if (value) {
                    ctrl.$parsers.unshift(function(viewValue) {
                        var origin = scope.passwordVerify;
                        if (origin !== viewValue) {
                            ctrl.$setValidity("passwordVerify", false);
                            return undefined;
                        } else {
                            ctrl.$setValidity("passwordVerify", true);
                            return viewValue;
                        }
                    });
                }
            });
        }
    };
});
app.directive('editable', function() {
    return {
        require: 'ngModel',
        link: function(scope, elm, attrs, ctrl) {
            // view -> model
            elm.bind('blur', function() {
                scope.$apply(function() {
                    ctrl.$setViewValue(elm.html());
                });
            });

            // model -> view
            ctrl.render = function(value) {
                elm.html(value);
            };

            // load init value from DOM
            ctrl.$setViewValue(elm.html());

            elm.bind('keydown', function(event) {
                console.log("keydown " + event.which);
                var esc = event.which == 27,
                    el = event.target;

                if (esc) {
                    console.log("esc");
                    ctrl.$setViewValue(elm.html());
                    el.blur();
                    event.preventDefault();
                }

            });

        }
    };
});

/*
Home controller
 */
app.controller('interviewers', ['$scope', '$http', function($scope, $http){
 $scope.submit = function(){
  $http.get('/api/interviewer').then(function(response){
   console.log(response);
   $scope.interviewers = response.data
  })
 }
}]);
app.controller('students', ['$scope', '$http', '$mdDialog', function($scope, $http, $mdDialog){
    $scope.submit = function() {
        $http.get('/api/student').then(function (response) {
            console.log(response);
            $scope.students = response.data
        })
    };
    $scope.editStudent = function(id) {
        $http.get('/api/student?_id=' + id).then(function (response) {
            $scope.student = response.data[0];
            console.log('hello');
            $mdDialog.show({
                controller: 'editStudent',
                templateUrl: 'views/partials/dialogs/student/studentEdit.html',
                parent: angular.element(document.body),
                scope: $scope,
                clickOutsideToClose: true
            })
        })
    };
}]);
app.controller('editStudent', ['$scope', '$mdDialog', function($scope, $mdDialog){
    $scope.close = function(){
        $mdDialog.hide();
    }
}]);

/*
Register dialog controller
 */
app.controller('registerOpen', ['$scope', '$mdDialog', '$http', function($scope, $mdDialog){
    $scope.openRegister = function(ev){
        $mdDialog.show({
            controller: register,
            templateUrl: 'views/partials/dialogs/register/register.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose: true
        })
    };
    function register($scope, $http, $mdDialog) {
        $scope.register = function(username, email, password){
            $http.post('/api/users', {
                username: username,
                email: email,
                password: password
            }).then(function(response){
                console.log(response);
                if(response == 200) {
                    $mdDialog.hide()
                }
            });
        };
        $scope.close = function(){
            $mdDialog.hide();
        };
    }
}]);

/*
Interviewer dialog controller
 */
app.controller('interviewer', ['$scope', '$mdDialog', function($scope, $mdDialog){
    $scope.openInterviewer = function(ev){
        $mdDialog.show({
            controller: addInterviewer,
            templateUrl: 'views/partials/dialogs/interviewer/interviewer.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose: true
        })
    };
    function addInterviewer($scope){
        $scope.close = function() {
            $mdDialog.hide();
            $scope.cohorts = [
                {name: 'Delta'},
                {name: 'gamma'},
                {name: 'Epsilon'}
            ];
            $scope.events = [
                {name: 'mocks Delta'},
                {name: 'career Delta'},
                {name: 'mocks Epsilon'}
            ];
        };
        $scope.submit = function(fname, lname, title, company, link, desc){
            var interviewer = {
                fName: fname,
                lName: lname,
                title: title,
                company: company,
                link: link,
                description: desc
            };
            console.log(interviewer);
        };
    }
}]);

/*
Student dialog controller
 */
app.controller('student', ['$scope', '$mdDialog', function($scope,$mdDialog){
    $scope.openStudents = function(ev){
        $mdDialog.show({
            controller: addStudent,
            templateUrl: 'views/partials/dialogs/student/student.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose: true
        })
    };
    function addStudent($scope) {
        $scope.close = function () {
            $mdDialog.hide();
            $scope.companies = [
                {name: 'Prime'},
                {name: 'Nerdery'},
                {name: 'Digital People'}
            ];
            $scope.events = [
                {name: 'mocks Delta'},
                {name: 'career Delta'},
                {name: 'mocks Epsilon'}
            ];
        };
        $scope.submit = function(fname, lname, email, cohort){
            var student = {
                fname: fname,
                lname: lname,
                email: email,
                cohort: cohort
            };
            console.log(student);
        }
    }

}]);

/*
Student dialog controller
 */
app.controller('uploads', ['$scope', '$mdDialog', function($scope, $mdDialog){
    $scope.openUploads = function(ev){
        $mdDialog.show({
            controller: uploadFile,
            templateUrl: 'views/partials/dialogs/upload/upload.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose: true
        })
    };
    function uploadFile($scope, $mdDialog){

        $scope.submit = function(file){
            var mine = {
                file: file
            };
        console.log(mine);
        };
        $scope.close = function() {
            $mdDialog.hide();
        }
    }
}]);

/*
 Forgot controller
  */
app.controller('sendEmail', ['$scope', '$http', '$location', function($scope, $http, $location){
    $scope.send = function(email) {
        $http.post('/forgot', {email: email}).then(function (response) {
            if (response.status == 200) {
                $location.path('/')
            }
        })
    }
}]);

/*
 Login controller
  */
app.controller('login', ['$rootScope','$scope', '$http', '$location', '$mdToast', function($rootScope, $scope, $http, $location, $mdToast){
    $scope.submit = function(username, password){
        $http.post('/authenticate', {username: username, password: password}).then(function(response){
                if(response.data.token){
                    sessionStorage.username = angular.toJson(response.data.user.username);
                    sessionStorage.email = angular.toJson(response.data.user.email);
                    sessionStorage.token = angular.toJson(response.data.token);
                    $location.path('/events');
                    $rootScope.$broadcast('logged In')
                }else{
                    $mdToast.showSimple(response.data.error)
                }

            }

        )
    };
    $scope.forgot = function(){
        $location.path('/forgot');
    }
}]);

/*
 Logout controller
  */
app.controller('logout', ['$rootScope', '$scope','$location', '$interval', function($rootScope, $scope, $location, $interval){
    $scope.logout = function(){
        $location.path('/logout');
        sessionStorage.clear();
        $rootScope.$broadcast('logged In');
        $interval(function() {
            $location.path('/')
        }, 3000, 1)
    };
}]);

/*
 Profile controller
  */
app.controller('profile', ['$scope', '$http', '$window', '$location', function($scope, $http, $window, $location){
    $scope.username = $window.sessionStorage.username.replace(/^"(.*)"$/, '$1');
    $scope.email = $window.sessionStorage.email.replace(/^"(.*)"$/, '$1');
    $scope.save = function(password){
        var username = $scope.username;
        var email = $scope.email;
        $http.post('/change', {username: username, email: email, password: password}).then(function(response){
            if(response.status === 200){
                $location.path('/events')
            }
        });
    };
    $scope.switch = function(){
        var off = disabled;
        var on = enabled;

        if($scope.enabled = off){
            $scope.enabled = on
        } else {
            $scope.enabled = off;
        }
        console.log($scope.enabled)
    }
}]);

/*
 Reset controller
  */
app.controller('reset',['$scope', '$http', '$routeParams', '$location', function($scope, $http, $routeParams, $location){
    $scope.changePass = function(password, confirm){
        console.log(password);
        var token = $routeParams.token;
        if(password === confirm){
            $http.post('/reset', {password: password, token: token}).then(function(response){
                console.log(response);
                if(response.status === 200){
                    $location.path('/');
                }
            })
        }
    }
}]);

/*
Archived events controller
 */

/*
 Events list controller
  */
app.controller('eventsCtrl', ['$scope', '$http', '$filter', function($scope, $http, $filter) {
    $http.get('/api/event').then(function success(response) {

        // set get request to a variable
        eventsList = response.data;
        console.log(eventsList);

        // initialize an empty array for storing data to be used in ng-repeat
        var tiles = [];

        // iterate over response data and push objects into array for ng-repeat
        eventsList.forEach(function(item, pos) {
            tiles.push({title: title = item.cohort + ' ' + item.type, date: $filter('date')(new Date(item.date), 'MM/dd/yy'), _id: item._id});
        });

        // set scope tiles equal to the object array
        $scope.tiles = tiles;
    }, function error() {});

}]);


app.controller('modalCtrl', ['$scope', '$mdDialog', function($scope, $mdDialog) {
    $scope.alert = '';
    $scope.showAlert = function (ev) {
        $mdDialog.show(
            $mdDialog.alert()
                .parent(angular.element(document.body))
                .title('You are about to Archive this Event!')
                .content('Click to confirm. You can access this Event at any time in Archived Events.')
                .ariaLabel('Alert Dialog Demo')
                .ok('Got it!')
                .targetEvent(ev)
        );
    };
    $scope.showConfirm = function (ev) {
        // Appending dialog to document.body to cover sidenav in docs app
        var confirm = $mdDialog.confirm()
            .title('Would you like to delete this Event?')
            .content('This will permanently delete this Event.')
            .ariaLabel('Confirm Dialog Demo')
            .targetEvent(ev)
            .ok('Yes, delete this Event!')
            .cancel('No way, that was close!');

        $mdDialog.show(confirm).then(function () {
            $scope.status = 'You deleted this event.';
        }, function () {
            $scope.status = 'You did not delete this event.';
        });
    };
    $scope.showAdvanced = function(ev) {
        $mdDialog.show({
            controller: DialogController,
            templateUrl: 'dialog1.tmpl.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose:true
        })
            .then(function(answer) {
                $scope.status = 'You said the information was "' + answer + '".';
            }, function() {
                $scope.status = 'You cancelled the dialog.';
            });
    };

    function DialogController($scope, $mdDialog) {
        $scope.hide = function() {
            $mdDialog.hide();
        };
        $scope.cancel = function() {
            $mdDialog.cancel();
        };
        $scope.answer = function(answer) {
            $mdDialog.hide(answer);
        };
    }
}]);

/*
Generate event controller
 */
app.controller('generateCtrl', ['$scope', '$http', function($scope, $http) {

    // time experiments
    var startTime = moment('1:00 PM', 'h:mm A').format('HH:mm');
    var endTime = moment('4:00 PM', 'h:mm A').format('HH:mm');
    var eventLength = moment(endTime, 'HH:mm').diff(moment(startTime, 'HH:mm'), 'minutes');
    var slotLength = moment.duration((eventLength / 9), 'minutes').asMinutes();
    console.log(moment(startTime, 'HH:mm').add((slotLength * 8), 'minutes').format('h:mm A'));

    // Initialize UI Grid variables
    var gridCols = [];
    var gridData = [];

    // UI Grid options
    $scope.gridOptions = {
        enableSorting: false,
        enableGridMenu: true,
        enableFiltering: false,
        onRegisterApi: function (gridApi) {
            $scope.gridApi = gridApi;
        }
    };

    // "Generate" button click function
    $scope.generate = function () {

        // request matches from server given event settings
        $http({
            method: 'GET',
            url: 'http://localhost:3000/test'
        }).then(function successCallback(response) {

            // empty the UI Grid variables in case there is data
            $scope.gridOptions.columnDefs = [];
            $scope.gridOptions.data = [];
            gridCols = [];
            gridData = [];

            // console log API response for debugging
            console.log(response);

            // iterate over the interviewer array within the response
            // create various arrays and objects to meet UI Grid data requirements
            response.data.interviewer.forEach(function(item, pos) {

                // push the company and interviewer name into the column names array
                // this will be the column header for a particular interviewer
                gridCols.push({name: item.company + ' / ' + item.fName, field: item.company + '_' + item.name, width:150, displayName: item.company + ' / ' + item.fName});

                // set the scheduled object to a variable
                // this object contains the entire schedule for an interviewer
                var sched = item.scheduled;

                // initiate an empty students array
                // this will be used to store the formatted schedule for each company
                var students = [];

                // iterate over the scheduled object using the getOwnPropertyNames method
                Object.getOwnPropertyNames(sched).forEach(function (elem, index, array) {

                    // create an array of objects that contains each scheduled item
                    // this array will contain the formatted schedule for an interviewer
                    titleObj = {};
                    titleObj[item.company + '_' + item.fname] = sched[elem];
                    students.push(titleObj);
            });

            // push the updated schedule array into the master gridData array
            gridData.push(students);
            });

            // gridData is still not correctly formatted
            // each item represents an interviewer column
            // when in fact, UI Grid requires each item in the array to be a row of data
            // Underscore unzip function performs necessary matrix transformation
            gridData = _.unzip(gridData);

            // initiate empty array to store each row as an object of objects
            var gridArr = [];

            // iterate over unzipped gridData
            gridData.forEach(function (item, pos) {

                // initiate empty object for storing individual schedule items
                var rowObj = {};

                // iterate over the schedule row
                // each item in the row array represents a single cell in the grid
                item.forEach(function (elem, index) {
                    // use Underscore extend method to "push" each item into row object
                    _.extend(rowObj, elem);
                });

                // push the row object into the previously initiated grid array
                gridArr.push(rowObj);
            });

            // initiate an empty object for storing the entire schedule
            gridObj = {};

            // create time slots column
            var timeSlots = [];
            var slotsSize = gridArr.length;
            while(slotsSize--) {
                timeSlots.push({time: 'Slot ' + ((gridArr.length) - slotsSize)});
            }

            console.log(timeSlots);

            // using Underscore extend again, "push" the array of objects into the master object
            _.extend(gridObj, gridArr);

            // update the gridData variable
            gridData = gridArr;
        }).then(function() {

            // after capturing and formatting the data, update UI Grid options
            $scope.gridOptions.columnDefs = gridCols;
            $scope.gridOptions.data = gridData;
        })
    };
}]);

/*
 New event controller
  */
app.controller('newEventCtrl', ['$scope', '$http', '$location', '$filter', function($scope, $http, $location, $filter) {
    $scope.submit = function() {

        var event = {
            type: $scope.eventType,
            cohort: $scope.cohort,
            date: $scope.date,
            location: $scope.location,
            startTime: $filter('date')(new Date($scope.sTime), 'HH:mm'),
            endTime: $filter('date')(new Date($scope.eTime), 'HH:mm'),
            interviewDuration: $scope.slotDur,
            organizer: $scope.organizer
        };

        $http({
            method: 'POST',
            url: 'api/event',
            data: event
        }).then(function success(data) {
            console.log(data);
        }, function error() {}).then(function redirect() {
            $location.path('/events')
        })
    }
}]);

/*
 View events controller
 */
app.controller('viewEventCtrl', ['$scope', '$http', '$filter', '$routeParams', function($scope, $http, $filter, $routeParams) {

    var eventParam = $routeParams._id;

    $http.get('/api/event?_id=' + eventParam).then(function success(response) {

        $scope.eventTitle = response.data[0].cohort + ' ' + response.data[0].type

    }, function error() {});

}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImhvbWUvaG9tZS5jb250cm9sbGVyLmpzIiwiaW50ZXJ2aWV3ZXJzL2ludGVydmlld2Vycy5jb250cm9sbGVyLmpzIiwic3R1ZGVudHMvc3R1ZGVudHMuY29udHJvbGxlci5qcyIsImRpYWxvZ3MvcmVnaXN0ZXIvcmVnaXN0ZXIuY29udHJvbGxlci5qcyIsImRpYWxvZ3MvaW50ZXJ2aWV3ZXIvaW50ZXJ2aWV3ZXIuY29udHJvbGxlci5qcyIsImRpYWxvZ3Mvc3R1ZGVudC9zdHVkZW50LmNvbnRyb2xsZXIuanMiLCJkaWFsb2dzL3VwbG9hZC91cGxvYWQuY29udHJvbGxlci5qcyIsImFjY291bnQvZm9yZ290L2ZvcmdvdC5jb250cm9sbGVyLmpzIiwiYWNjb3VudC9sb2dpbi9sb2dpbi5jb250cm9sbGVyLmpzIiwiYWNjb3VudC9sb2dvdXQvbG9nb3V0LmNvbnRyb2xsZXIuanMiLCJhY2NvdW50L3Byb2ZpbGUvcHJvZmlsZS5jb250cm9sbGVyLmpzIiwiYWNjb3VudC9yZXNldC9yZXNldC5jb250cm9sbGVyLmpzIiwiZXZlbnRzL2FyY2hpdmVkLWV2ZW50cy9hcmNoaXZlZC1ldmVudHMuY29udHJvbGxlci5qcyIsImV2ZW50cy9ldmVudHMtbGlzdC9ldmVudHMtbGlzdC5jb250cm9sbGVyLmpzIiwiZXZlbnRzL2dlbmVyYXRlLXNjaGVkdWxlL2dlbmVyYXRlLXNjaGVkdWxlLmNvbnRyb2xsZXIuanMiLCJldmVudHMvbmV3LWV2ZW50L25ldy1ldmVudC5jb250cm9sbGVyLmpzIiwiZXZlbnRzL3ZpZXctZXZlbnQvdmlldy1ldmVudC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNySkE7QUFDQTtBQUNBO0FBQ0E7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDL0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN4Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN2Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDMUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDakZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzdIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbJ25nTWF0ZXJpYWwnLCAnbmdSb3V0ZScsICduZ01lc3NhZ2VzJywgJ3VpLmdyaWQnLCAndWkuZ3JpZC5lZGl0JywgJ3VpLmdyaWQucm93RWRpdCcsICd1aS5ncmlkLmV4cG9ydGVyJ10pO1xuXG4vKlxuIEFuZ3VsYXIgY29uZmlndXJhdGlvblxuICovXG5hcHAuY29uZmlnKFsnJHJvdXRlUHJvdmlkZXInLCAnJGxvY2F0aW9uUHJvdmlkZXInLCAnJG1kVGhlbWluZ1Byb3ZpZGVyJywgZnVuY3Rpb24oJHJvdXRlUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyLCAkbWRUaGVtaW5nUHJvdmlkZXIpe1xuXG4gICAgLy8gQ29sb3IgcGFsZXR0ZVxuICAgICRtZFRoZW1pbmdQcm92aWRlci50aGVtZSgnZGVmYXVsdCcpXG4gICAgICAgIC5wcmltYXJ5UGFsZXR0ZSgnYmx1ZS1ncmV5JylcbiAgICAgICAgLmFjY2VudFBhbGV0dGUoJ29yYW5nZScpO1xuXG4gICAgLy8gSFRNTDUgbW9kZVxuICAgICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh7XG4gICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICB9KTtcblxuICAgIC8vIFJvdXRlc1xuICAgICRyb3V0ZVByb3ZpZGVyLlxuICAgICAgICB3aGVuKCcvaG9tZScsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFydGlhbHMvaG9tZS9ob21lLmh0bWwnXG4gICAgICAgIH0pLlxuICAgICAgICB3aGVuKCcvJywge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYXJ0aWFscy9hY2NvdW50L2xvZ2luL2xvZ2luLmh0bWwnXG4gICAgICAgIH0pLlxuICAgICAgICB3aGVuKCcvZm9yZ290Jywge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYXJ0aWFscy9hY2NvdW50L2ZvcmdvdC9mb3Jnb3QuaHRtbCdcbiAgICAgICAgfSkuXG4gICAgICAgIHdoZW4oJy9ldmVudHMnLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3BhcnRpYWxzL2V2ZW50cy9ldmVudHMtbGlzdC9ldmVudHMtbGlzdC5odG1sJ1xuICAgICAgICB9KS5cbiAgICAgICAgd2hlbignL2V2ZW50PzpldmVudElkJywge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYXJ0aWFscy9ldmVudHMvdmlldy1ldmVudC92aWV3LWV2ZW50Lmh0bWwnXG4gICAgICAgIH0pLlxuICAgICAgICB3aGVuKCcvc3R1ZGVudHMnLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3BhcnRpYWxzL3N0dWRlbnRzL3N0dWRlbnRzLmh0bWwnXG4gICAgICAgIH0pLlxuICAgICAgICB3aGVuKCcvaW50ZXJ2aWV3ZXJzJywge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYXJ0aWFscy9pbnRlcnZpZXdlcnMvaW50ZXJ2aWV3ZXJzLmh0bWwnXG4gICAgICAgIH0pLlxuICAgICAgICB3aGVuKCcvYXJjaGl2ZWQtZXZlbnRzJywge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYXJ0aWFscy9ldmVudHMvYXJjaGl2ZWQtZXZlbnRzL2FyY2hpdmVkLWV2ZW50cy5odG1sJ1xuICAgICAgICB9KS5cbiAgICAgICAgd2hlbignL3Byb2ZpbGUnLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3BhcnRpYWxzL2FjY291bnQvcHJvZmlsZS9wcm9maWxlLmh0bWwnXG4gICAgICAgIH0pLlxuICAgICAgICB3aGVuKCcvbG9nb3V0Jywge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYXJ0aWFscy9hY2NvdW50L2xvZ291dC9sb2dvdXQuaHRtbCdcbiAgICAgICAgfSkuXG4gICAgICAgIHdoZW4oJy9uZXctZXZlbnQnLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3BhcnRpYWxzL2V2ZW50cy9uZXctZXZlbnQvbmV3LWV2ZW50Lmh0bWwnXG4gICAgICAgIH0pLlxuICAgICAgICB3aGVuKCcvcmVzZXQvOnRva2VuJywge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYXJ0aWFscy9hY2NvdW50L3Jlc2V0L3Jlc2V0Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ3Jlc2V0J1xuICAgICAgICB9KS5cbiAgICAgICAgb3RoZXJ3aXNlKHtcbiAgICAgICAgICAgIHJlZGlyZWN0VG86ICcvJ1xuICAgIH0pXG59XSk7XG5cbi8qXG5Ub29sYmFyIGNvbnRyb2xsZXJcbiAqL1xuYXBwLmNvbnRyb2xsZXIoJ3Rvb2xiYXInLCBbJyRyb290U2NvcGUnLCckbG9jYXRpb24nLCckc2NvcGUnLCAnJHdpbmRvdycsIGZ1bmN0aW9uKCRyb290U2NvcGUsICRsb2NhdGlvbiwgJHNjb3BlLCAkd2luZG93KXtcbiAgICAkc2NvcGUucGF0aHMgPSB0cnVlO1xuICAgICRyb290U2NvcGUuJG9uKCdsb2dnZWQgSW4nLCBmdW5jdGlvbigpe1xuICAgICAgICBpZigkd2luZG93LnNlc3Npb25TdG9yYWdlLnRva2VuID09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAkc2NvcGUucGF0aHMgPSB0cnVlO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICRzY29wZS5wYXRocyA9IGZhbHNlO1xuICAgICAgICAgICAgJHNjb3BlLnVzZXIgPSB7XG4gICAgICAgICAgICAgICAgdXNlcm5hbWU6ICR3aW5kb3cuc2Vzc2lvblN0b3JhZ2UudXNlcm5hbWUucmVwbGFjZSgvXlwiKC4qKVwiJC8sICckMScpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgJHNjb3BlLmdvSG9tZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICRsb2NhdGlvbi5wYXRoKCcvJyk7XG4gICAgfVxufV0pO1xuXG4vKlxuRGlyZWN0aXZlIHRvIGNoZWNrIHRoZSBwYXNzd29yZHMgYXJlIHRoZSBzYW1lXG4gKi9cbmFwcC5kaXJlY3RpdmUoXCJwYXNzd29yZFZlcmlmeVwiLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1aXJlOiBcIm5nTW9kZWxcIixcbiAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgIHBhc3N3b3JkVmVyaWZ5OiAnPSdcbiAgICAgICAgfSxcbiAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJsKSB7XG4gICAgICAgICAgICBzY29wZS4kd2F0Y2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbWJpbmVkO1xuICAgICAgICAgICAgICAgIGlmIChzY29wZS5wYXNzd29yZFZlcmlmeSB8fCBjdHJsLiR2aWV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tYmluZWQgPSBzY29wZS5wYXNzd29yZFZlcmlmeSArICdfJyArIGN0cmwuJHZpZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbWJpbmVkO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY3RybC4kcGFyc2Vycy51bnNoaWZ0KGZ1bmN0aW9uKHZpZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdpbiA9IHNjb3BlLnBhc3N3b3JkVmVyaWZ5O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9yaWdpbiAhPT0gdmlld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC4kc2V0VmFsaWRpdHkoXCJwYXNzd29yZFZlcmlmeVwiLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC4kc2V0VmFsaWRpdHkoXCJwYXNzd29yZFZlcmlmeVwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmlld1ZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG59KTtcbmFwcC5kaXJlY3RpdmUoJ2VkaXRhYmxlJywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVxdWlyZTogJ25nTW9kZWwnLFxuICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRycywgY3RybCkge1xuICAgICAgICAgICAgLy8gdmlldyAtPiBtb2RlbFxuICAgICAgICAgICAgZWxtLmJpbmQoJ2JsdXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZShlbG0uaHRtbCgpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBtb2RlbCAtPiB2aWV3XG4gICAgICAgICAgICBjdHJsLnJlbmRlciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgZWxtLmh0bWwodmFsdWUpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gbG9hZCBpbml0IHZhbHVlIGZyb20gRE9NXG4gICAgICAgICAgICBjdHJsLiRzZXRWaWV3VmFsdWUoZWxtLmh0bWwoKSk7XG5cbiAgICAgICAgICAgIGVsbS5iaW5kKCdrZXlkb3duJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImtleWRvd24gXCIgKyBldmVudC53aGljaCk7XG4gICAgICAgICAgICAgICAgdmFyIGVzYyA9IGV2ZW50LndoaWNoID09IDI3LFxuICAgICAgICAgICAgICAgICAgICBlbCA9IGV2ZW50LnRhcmdldDtcblxuICAgICAgICAgICAgICAgIGlmIChlc2MpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJlc2NcIik7XG4gICAgICAgICAgICAgICAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZShlbG0uaHRtbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgZWwuYmx1cigpO1xuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuICAgIH07XG59KTsiLCJcbi8qXG5Ib21lIGNvbnRyb2xsZXJcbiAqLyIsImFwcC5jb250cm9sbGVyKCdpbnRlcnZpZXdlcnMnLCBbJyRzY29wZScsICckaHR0cCcsIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHApe1xuICRzY29wZS5zdWJtaXQgPSBmdW5jdGlvbigpe1xuICAkaHR0cC5nZXQoJy9hcGkvaW50ZXJ2aWV3ZXInKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICRzY29wZS5pbnRlcnZpZXdlcnMgPSByZXNwb25zZS5kYXRhXG4gIH0pXG4gfVxufV0pOyIsImFwcC5jb250cm9sbGVyKCdzdHVkZW50cycsIFsnJHNjb3BlJywgJyRodHRwJywgJyRtZERpYWxvZycsIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsICRtZERpYWxvZyl7XG4gICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkaHR0cC5nZXQoJy9hcGkvc3R1ZGVudCcpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICAkc2NvcGUuc3R1ZGVudHMgPSByZXNwb25zZS5kYXRhXG4gICAgICAgIH0pXG4gICAgfTtcbiAgICAkc2NvcGUuZWRpdFN0dWRlbnQgPSBmdW5jdGlvbihpZCkge1xuICAgICAgICAkaHR0cC5nZXQoJy9hcGkvc3R1ZGVudD9faWQ9JyArIGlkKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgJHNjb3BlLnN0dWRlbnQgPSByZXNwb25zZS5kYXRhWzBdO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2hlbGxvJyk7XG4gICAgICAgICAgICAkbWREaWFsb2cuc2hvdyh7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2VkaXRTdHVkZW50JyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3BhcnRpYWxzL2RpYWxvZ3Mvc3R1ZGVudC9zdHVkZW50RWRpdC5odG1sJyxcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KSxcbiAgICAgICAgICAgICAgICBzY29wZTogJHNjb3BlLFxuICAgICAgICAgICAgICAgIGNsaWNrT3V0c2lkZVRvQ2xvc2U6IHRydWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfTtcbn1dKTtcbmFwcC5jb250cm9sbGVyKCdlZGl0U3R1ZGVudCcsIFsnJHNjb3BlJywgJyRtZERpYWxvZycsIGZ1bmN0aW9uKCRzY29wZSwgJG1kRGlhbG9nKXtcbiAgICAkc2NvcGUuY2xvc2UgPSBmdW5jdGlvbigpe1xuICAgICAgICAkbWREaWFsb2cuaGlkZSgpO1xuICAgIH1cbn1dKTsiLCJcbi8qXG5SZWdpc3RlciBkaWFsb2cgY29udHJvbGxlclxuICovXG5hcHAuY29udHJvbGxlcigncmVnaXN0ZXJPcGVuJywgWyckc2NvcGUnLCAnJG1kRGlhbG9nJywgJyRodHRwJywgZnVuY3Rpb24oJHNjb3BlLCAkbWREaWFsb2cpe1xuICAgICRzY29wZS5vcGVuUmVnaXN0ZXIgPSBmdW5jdGlvbihldil7XG4gICAgICAgICRtZERpYWxvZy5zaG93KHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IHJlZ2lzdGVyLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYXJ0aWFscy9kaWFsb2dzL3JlZ2lzdGVyL3JlZ2lzdGVyLmh0bWwnLFxuICAgICAgICAgICAgcGFyZW50OiBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuYm9keSksXG4gICAgICAgICAgICB0YXJnZXRFdmVudDogZXYsXG4gICAgICAgICAgICBjbGlja091dHNpZGVUb0Nsb3NlOiB0cnVlXG4gICAgICAgIH0pXG4gICAgfTtcbiAgICBmdW5jdGlvbiByZWdpc3Rlcigkc2NvcGUsICRodHRwLCAkbWREaWFsb2cpIHtcbiAgICAgICAgJHNjb3BlLnJlZ2lzdGVyID0gZnVuY3Rpb24odXNlcm5hbWUsIGVtYWlsLCBwYXNzd29yZCl7XG4gICAgICAgICAgICAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzJywge1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSxcbiAgICAgICAgICAgICAgICBlbWFpbDogZW1haWwsXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkXG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgaWYocmVzcG9uc2UgPT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgICRtZERpYWxvZy5oaWRlKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLmNsb3NlID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICRtZERpYWxvZy5oaWRlKCk7XG4gICAgICAgIH07XG4gICAgfVxufV0pOyIsIlxuLypcbkludGVydmlld2VyIGRpYWxvZyBjb250cm9sbGVyXG4gKi9cbmFwcC5jb250cm9sbGVyKCdpbnRlcnZpZXdlcicsIFsnJHNjb3BlJywgJyRtZERpYWxvZycsIGZ1bmN0aW9uKCRzY29wZSwgJG1kRGlhbG9nKXtcbiAgICAkc2NvcGUub3BlbkludGVydmlld2VyID0gZnVuY3Rpb24oZXYpe1xuICAgICAgICAkbWREaWFsb2cuc2hvdyh7XG4gICAgICAgICAgICBjb250cm9sbGVyOiBhZGRJbnRlcnZpZXdlcixcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFydGlhbHMvZGlhbG9ncy9pbnRlcnZpZXdlci9pbnRlcnZpZXdlci5odG1sJyxcbiAgICAgICAgICAgIHBhcmVudDogYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmJvZHkpLFxuICAgICAgICAgICAgdGFyZ2V0RXZlbnQ6IGV2LFxuICAgICAgICAgICAgY2xpY2tPdXRzaWRlVG9DbG9zZTogdHJ1ZVxuICAgICAgICB9KVxuICAgIH07XG4gICAgZnVuY3Rpb24gYWRkSW50ZXJ2aWV3ZXIoJHNjb3BlKXtcbiAgICAgICAgJHNjb3BlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkbWREaWFsb2cuaGlkZSgpO1xuICAgICAgICAgICAgJHNjb3BlLmNvaG9ydHMgPSBbXG4gICAgICAgICAgICAgICAge25hbWU6ICdEZWx0YSd9LFxuICAgICAgICAgICAgICAgIHtuYW1lOiAnZ2FtbWEnfSxcbiAgICAgICAgICAgICAgICB7bmFtZTogJ0Vwc2lsb24nfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICRzY29wZS5ldmVudHMgPSBbXG4gICAgICAgICAgICAgICAge25hbWU6ICdtb2NrcyBEZWx0YSd9LFxuICAgICAgICAgICAgICAgIHtuYW1lOiAnY2FyZWVyIERlbHRhJ30sXG4gICAgICAgICAgICAgICAge25hbWU6ICdtb2NrcyBFcHNpbG9uJ31cbiAgICAgICAgICAgIF07XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5zdWJtaXQgPSBmdW5jdGlvbihmbmFtZSwgbG5hbWUsIHRpdGxlLCBjb21wYW55LCBsaW5rLCBkZXNjKXtcbiAgICAgICAgICAgIHZhciBpbnRlcnZpZXdlciA9IHtcbiAgICAgICAgICAgICAgICBmTmFtZTogZm5hbWUsXG4gICAgICAgICAgICAgICAgbE5hbWU6IGxuYW1lLFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgICAgICAgICAgICBjb21wYW55OiBjb21wYW55LFxuICAgICAgICAgICAgICAgIGxpbms6IGxpbmssXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGRlc2NcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhpbnRlcnZpZXdlcik7XG4gICAgICAgIH07XG4gICAgfVxufV0pOyIsIlxuLypcblN0dWRlbnQgZGlhbG9nIGNvbnRyb2xsZXJcbiAqL1xuYXBwLmNvbnRyb2xsZXIoJ3N0dWRlbnQnLCBbJyRzY29wZScsICckbWREaWFsb2cnLCBmdW5jdGlvbigkc2NvcGUsJG1kRGlhbG9nKXtcbiAgICAkc2NvcGUub3BlblN0dWRlbnRzID0gZnVuY3Rpb24oZXYpe1xuICAgICAgICAkbWREaWFsb2cuc2hvdyh7XG4gICAgICAgICAgICBjb250cm9sbGVyOiBhZGRTdHVkZW50LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYXJ0aWFscy9kaWFsb2dzL3N0dWRlbnQvc3R1ZGVudC5odG1sJyxcbiAgICAgICAgICAgIHBhcmVudDogYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmJvZHkpLFxuICAgICAgICAgICAgdGFyZ2V0RXZlbnQ6IGV2LFxuICAgICAgICAgICAgY2xpY2tPdXRzaWRlVG9DbG9zZTogdHJ1ZVxuICAgICAgICB9KVxuICAgIH07XG4gICAgZnVuY3Rpb24gYWRkU3R1ZGVudCgkc2NvcGUpIHtcbiAgICAgICAgJHNjb3BlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJG1kRGlhbG9nLmhpZGUoKTtcbiAgICAgICAgICAgICRzY29wZS5jb21wYW5pZXMgPSBbXG4gICAgICAgICAgICAgICAge25hbWU6ICdQcmltZSd9LFxuICAgICAgICAgICAgICAgIHtuYW1lOiAnTmVyZGVyeSd9LFxuICAgICAgICAgICAgICAgIHtuYW1lOiAnRGlnaXRhbCBQZW9wbGUnfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICRzY29wZS5ldmVudHMgPSBbXG4gICAgICAgICAgICAgICAge25hbWU6ICdtb2NrcyBEZWx0YSd9LFxuICAgICAgICAgICAgICAgIHtuYW1lOiAnY2FyZWVyIERlbHRhJ30sXG4gICAgICAgICAgICAgICAge25hbWU6ICdtb2NrcyBFcHNpbG9uJ31cbiAgICAgICAgICAgIF07XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5zdWJtaXQgPSBmdW5jdGlvbihmbmFtZSwgbG5hbWUsIGVtYWlsLCBjb2hvcnQpe1xuICAgICAgICAgICAgdmFyIHN0dWRlbnQgPSB7XG4gICAgICAgICAgICAgICAgZm5hbWU6IGZuYW1lLFxuICAgICAgICAgICAgICAgIGxuYW1lOiBsbmFtZSxcbiAgICAgICAgICAgICAgICBlbWFpbDogZW1haWwsXG4gICAgICAgICAgICAgICAgY29ob3J0OiBjb2hvcnRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhzdHVkZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxufV0pOyIsIlxuLypcblN0dWRlbnQgZGlhbG9nIGNvbnRyb2xsZXJcbiAqL1xuYXBwLmNvbnRyb2xsZXIoJ3VwbG9hZHMnLCBbJyRzY29wZScsICckbWREaWFsb2cnLCBmdW5jdGlvbigkc2NvcGUsICRtZERpYWxvZyl7XG4gICAgJHNjb3BlLm9wZW5VcGxvYWRzID0gZnVuY3Rpb24oZXYpe1xuICAgICAgICAkbWREaWFsb2cuc2hvdyh7XG4gICAgICAgICAgICBjb250cm9sbGVyOiB1cGxvYWRGaWxlLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYXJ0aWFscy9kaWFsb2dzL3VwbG9hZC91cGxvYWQuaHRtbCcsXG4gICAgICAgICAgICBwYXJlbnQ6IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KSxcbiAgICAgICAgICAgIHRhcmdldEV2ZW50OiBldixcbiAgICAgICAgICAgIGNsaWNrT3V0c2lkZVRvQ2xvc2U6IHRydWVcbiAgICAgICAgfSlcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHVwbG9hZEZpbGUoJHNjb3BlLCAkbWREaWFsb2cpe1xuXG4gICAgICAgICRzY29wZS5zdWJtaXQgPSBmdW5jdGlvbihmaWxlKXtcbiAgICAgICAgICAgIHZhciBtaW5lID0ge1xuICAgICAgICAgICAgICAgIGZpbGU6IGZpbGVcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNvbnNvbGUubG9nKG1pbmUpO1xuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRtZERpYWxvZy5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XSk7IiwiXG4vKlxuIEZvcmdvdCBjb250cm9sbGVyXG4gICovXG5hcHAuY29udHJvbGxlcignc2VuZEVtYWlsJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnJGxvY2F0aW9uJywgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgJGxvY2F0aW9uKXtcbiAgICAkc2NvcGUuc2VuZCA9IGZ1bmN0aW9uKGVtYWlsKSB7XG4gICAgICAgICRodHRwLnBvc3QoJy9mb3Jnb3QnLCB7ZW1haWw6IGVtYWlsfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cbn1dKTsiLCJcbi8qXG4gTG9naW4gY29udHJvbGxlclxuICAqL1xuYXBwLmNvbnRyb2xsZXIoJ2xvZ2luJywgWyckcm9vdFNjb3BlJywnJHNjb3BlJywgJyRodHRwJywgJyRsb2NhdGlvbicsICckbWRUb2FzdCcsIGZ1bmN0aW9uKCRyb290U2NvcGUsICRzY29wZSwgJGh0dHAsICRsb2NhdGlvbiwgJG1kVG9hc3Qpe1xuICAgICRzY29wZS5zdWJtaXQgPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpe1xuICAgICAgICAkaHR0cC5wb3N0KCcvYXV0aGVudGljYXRlJywge3VzZXJuYW1lOiB1c2VybmFtZSwgcGFzc3dvcmQ6IHBhc3N3b3JkfSkudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgICAgICAgICAgaWYocmVzcG9uc2UuZGF0YS50b2tlbil7XG4gICAgICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnVzZXJuYW1lID0gYW5ndWxhci50b0pzb24ocmVzcG9uc2UuZGF0YS51c2VyLnVzZXJuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2UuZW1haWwgPSBhbmd1bGFyLnRvSnNvbihyZXNwb25zZS5kYXRhLnVzZXIuZW1haWwpO1xuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS50b2tlbiA9IGFuZ3VsYXIudG9Kc29uKHJlc3BvbnNlLmRhdGEudG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2V2ZW50cycpO1xuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2xvZ2dlZCBJbicpXG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICRtZFRvYXN0LnNob3dTaW1wbGUocmVzcG9uc2UuZGF0YS5lcnJvcilcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICApXG4gICAgfTtcbiAgICAkc2NvcGUuZm9yZ290ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9mb3Jnb3QnKTtcbiAgICB9XG59XSk7IiwiXG4vKlxuIExvZ291dCBjb250cm9sbGVyXG4gICovXG5hcHAuY29udHJvbGxlcignbG9nb3V0JywgWyckcm9vdFNjb3BlJywgJyRzY29wZScsJyRsb2NhdGlvbicsICckaW50ZXJ2YWwnLCBmdW5jdGlvbigkcm9vdFNjb3BlLCAkc2NvcGUsICRsb2NhdGlvbiwgJGludGVydmFsKXtcbiAgICAkc2NvcGUubG9nb3V0ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9sb2dvdXQnKTtcbiAgICAgICAgc2Vzc2lvblN0b3JhZ2UuY2xlYXIoKTtcbiAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdsb2dnZWQgSW4nKTtcbiAgICAgICAgJGludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nKVxuICAgICAgICB9LCAzMDAwLCAxKVxuICAgIH07XG59XSk7IiwiXG4vKlxuIFByb2ZpbGUgY29udHJvbGxlclxuICAqL1xuYXBwLmNvbnRyb2xsZXIoJ3Byb2ZpbGUnLCBbJyRzY29wZScsICckaHR0cCcsICckd2luZG93JywgJyRsb2NhdGlvbicsIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsICR3aW5kb3csICRsb2NhdGlvbil7XG4gICAgJHNjb3BlLnVzZXJuYW1lID0gJHdpbmRvdy5zZXNzaW9uU3RvcmFnZS51c2VybmFtZS5yZXBsYWNlKC9eXCIoLiopXCIkLywgJyQxJyk7XG4gICAgJHNjb3BlLmVtYWlsID0gJHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5lbWFpbC5yZXBsYWNlKC9eXCIoLiopXCIkLywgJyQxJyk7XG4gICAgJHNjb3BlLnNhdmUgPSBmdW5jdGlvbihwYXNzd29yZCl7XG4gICAgICAgIHZhciB1c2VybmFtZSA9ICRzY29wZS51c2VybmFtZTtcbiAgICAgICAgdmFyIGVtYWlsID0gJHNjb3BlLmVtYWlsO1xuICAgICAgICAkaHR0cC5wb3N0KCcvY2hhbmdlJywge3VzZXJuYW1lOiB1c2VybmFtZSwgZW1haWw6IGVtYWlsLCBwYXNzd29yZDogcGFzc3dvcmR9KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICAgIGlmKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKXtcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2V2ZW50cycpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgJHNjb3BlLnN3aXRjaCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBvZmYgPSBkaXNhYmxlZDtcbiAgICAgICAgdmFyIG9uID0gZW5hYmxlZDtcblxuICAgICAgICBpZigkc2NvcGUuZW5hYmxlZCA9IG9mZil7XG4gICAgICAgICAgICAkc2NvcGUuZW5hYmxlZCA9IG9uXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkc2NvcGUuZW5hYmxlZCA9IG9mZjtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZygkc2NvcGUuZW5hYmxlZClcbiAgICB9XG59XSk7IiwiXG4vKlxuIFJlc2V0IGNvbnRyb2xsZXJcbiAgKi9cbmFwcC5jb250cm9sbGVyKCdyZXNldCcsWyckc2NvcGUnLCAnJGh0dHAnLCAnJHJvdXRlUGFyYW1zJywgJyRsb2NhdGlvbicsIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uKXtcbiAgICAkc2NvcGUuY2hhbmdlUGFzcyA9IGZ1bmN0aW9uKHBhc3N3b3JkLCBjb25maXJtKXtcbiAgICAgICAgY29uc29sZS5sb2cocGFzc3dvcmQpO1xuICAgICAgICB2YXIgdG9rZW4gPSAkcm91dGVQYXJhbXMudG9rZW47XG4gICAgICAgIGlmKHBhc3N3b3JkID09PSBjb25maXJtKXtcbiAgICAgICAgICAgICRodHRwLnBvc3QoJy9yZXNldCcsIHtwYXNzd29yZDogcGFzc3dvcmQsIHRva2VuOiB0b2tlbn0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICBpZihyZXNwb25zZS5zdGF0dXMgPT09IDIwMCl7XG4gICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cbn1dKTsiLCJcbi8qXG5BcmNoaXZlZCBldmVudHMgY29udHJvbGxlclxuICovIiwiXG4vKlxuIEV2ZW50cyBsaXN0IGNvbnRyb2xsZXJcbiAgKi9cbmFwcC5jb250cm9sbGVyKCdldmVudHNDdHJsJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnJGZpbHRlcicsIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsICRmaWx0ZXIpIHtcbiAgICAkaHR0cC5nZXQoJy9hcGkvZXZlbnQnKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcblxuICAgICAgICAvLyBzZXQgZ2V0IHJlcXVlc3QgdG8gYSB2YXJpYWJsZVxuICAgICAgICBldmVudHNMaXN0ID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgY29uc29sZS5sb2coZXZlbnRzTGlzdCk7XG5cbiAgICAgICAgLy8gaW5pdGlhbGl6ZSBhbiBlbXB0eSBhcnJheSBmb3Igc3RvcmluZyBkYXRhIHRvIGJlIHVzZWQgaW4gbmctcmVwZWF0XG4gICAgICAgIHZhciB0aWxlcyA9IFtdO1xuXG4gICAgICAgIC8vIGl0ZXJhdGUgb3ZlciByZXNwb25zZSBkYXRhIGFuZCBwdXNoIG9iamVjdHMgaW50byBhcnJheSBmb3IgbmctcmVwZWF0XG4gICAgICAgIGV2ZW50c0xpc3QuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBwb3MpIHtcbiAgICAgICAgICAgIHRpbGVzLnB1c2goe3RpdGxlOiB0aXRsZSA9IGl0ZW0uY29ob3J0ICsgJyAnICsgaXRlbS50eXBlLCBkYXRlOiAkZmlsdGVyKCdkYXRlJykobmV3IERhdGUoaXRlbS5kYXRlKSwgJ01NL2RkL3l5JyksIF9pZDogaXRlbS5faWR9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gc2V0IHNjb3BlIHRpbGVzIGVxdWFsIHRvIHRoZSBvYmplY3QgYXJyYXlcbiAgICAgICAgJHNjb3BlLnRpbGVzID0gdGlsZXM7XG4gICAgfSwgZnVuY3Rpb24gZXJyb3IoKSB7fSk7XG5cbn1dKTtcblxuXG5hcHAuY29udHJvbGxlcignbW9kYWxDdHJsJywgWyckc2NvcGUnLCAnJG1kRGlhbG9nJywgZnVuY3Rpb24oJHNjb3BlLCAkbWREaWFsb2cpIHtcbiAgICAkc2NvcGUuYWxlcnQgPSAnJztcbiAgICAkc2NvcGUuc2hvd0FsZXJ0ID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICRtZERpYWxvZy5zaG93KFxuICAgICAgICAgICAgJG1kRGlhbG9nLmFsZXJ0KClcbiAgICAgICAgICAgICAgICAucGFyZW50KGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KSlcbiAgICAgICAgICAgICAgICAudGl0bGUoJ1lvdSBhcmUgYWJvdXQgdG8gQXJjaGl2ZSB0aGlzIEV2ZW50IScpXG4gICAgICAgICAgICAgICAgLmNvbnRlbnQoJ0NsaWNrIHRvIGNvbmZpcm0uIFlvdSBjYW4gYWNjZXNzIHRoaXMgRXZlbnQgYXQgYW55IHRpbWUgaW4gQXJjaGl2ZWQgRXZlbnRzLicpXG4gICAgICAgICAgICAgICAgLmFyaWFMYWJlbCgnQWxlcnQgRGlhbG9nIERlbW8nKVxuICAgICAgICAgICAgICAgIC5vaygnR290IGl0IScpXG4gICAgICAgICAgICAgICAgLnRhcmdldEV2ZW50KGV2KVxuICAgICAgICApO1xuICAgIH07XG4gICAgJHNjb3BlLnNob3dDb25maXJtID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIC8vIEFwcGVuZGluZyBkaWFsb2cgdG8gZG9jdW1lbnQuYm9keSB0byBjb3ZlciBzaWRlbmF2IGluIGRvY3MgYXBwXG4gICAgICAgIHZhciBjb25maXJtID0gJG1kRGlhbG9nLmNvbmZpcm0oKVxuICAgICAgICAgICAgLnRpdGxlKCdXb3VsZCB5b3UgbGlrZSB0byBkZWxldGUgdGhpcyBFdmVudD8nKVxuICAgICAgICAgICAgLmNvbnRlbnQoJ1RoaXMgd2lsbCBwZXJtYW5lbnRseSBkZWxldGUgdGhpcyBFdmVudC4nKVxuICAgICAgICAgICAgLmFyaWFMYWJlbCgnQ29uZmlybSBEaWFsb2cgRGVtbycpXG4gICAgICAgICAgICAudGFyZ2V0RXZlbnQoZXYpXG4gICAgICAgICAgICAub2soJ1llcywgZGVsZXRlIHRoaXMgRXZlbnQhJylcbiAgICAgICAgICAgIC5jYW5jZWwoJ05vIHdheSwgdGhhdCB3YXMgY2xvc2UhJyk7XG5cbiAgICAgICAgJG1kRGlhbG9nLnNob3coY29uZmlybSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0gJ1lvdSBkZWxldGVkIHRoaXMgZXZlbnQuJztcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9ICdZb3UgZGlkIG5vdCBkZWxldGUgdGhpcyBldmVudC4nO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgICRzY29wZS5zaG93QWR2YW5jZWQgPSBmdW5jdGlvbihldikge1xuICAgICAgICAkbWREaWFsb2cuc2hvdyh7XG4gICAgICAgICAgICBjb250cm9sbGVyOiBEaWFsb2dDb250cm9sbGVyLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdkaWFsb2cxLnRtcGwuaHRtbCcsXG4gICAgICAgICAgICBwYXJlbnQ6IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KSxcbiAgICAgICAgICAgIHRhcmdldEV2ZW50OiBldixcbiAgICAgICAgICAgIGNsaWNrT3V0c2lkZVRvQ2xvc2U6dHJ1ZVxuICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oYW5zd2VyKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9ICdZb3Ugc2FpZCB0aGUgaW5mb3JtYXRpb24gd2FzIFwiJyArIGFuc3dlciArICdcIi4nO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9ICdZb3UgY2FuY2VsbGVkIHRoZSBkaWFsb2cuJztcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBEaWFsb2dDb250cm9sbGVyKCRzY29wZSwgJG1kRGlhbG9nKSB7XG4gICAgICAgICRzY29wZS5oaWRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkbWREaWFsb2cuaGlkZSgpO1xuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkbWREaWFsb2cuY2FuY2VsKCk7XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5hbnN3ZXIgPSBmdW5jdGlvbihhbnN3ZXIpIHtcbiAgICAgICAgICAgICRtZERpYWxvZy5oaWRlKGFuc3dlcik7XG4gICAgICAgIH07XG4gICAgfVxufV0pOyIsIlxuLypcbkdlbmVyYXRlIGV2ZW50IGNvbnRyb2xsZXJcbiAqL1xuYXBwLmNvbnRyb2xsZXIoJ2dlbmVyYXRlQ3RybCcsIFsnJHNjb3BlJywgJyRodHRwJywgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCkge1xuXG4gICAgLy8gdGltZSBleHBlcmltZW50c1xuICAgIHZhciBzdGFydFRpbWUgPSBtb21lbnQoJzE6MDAgUE0nLCAnaDptbSBBJykuZm9ybWF0KCdISDptbScpO1xuICAgIHZhciBlbmRUaW1lID0gbW9tZW50KCc0OjAwIFBNJywgJ2g6bW0gQScpLmZvcm1hdCgnSEg6bW0nKTtcbiAgICB2YXIgZXZlbnRMZW5ndGggPSBtb21lbnQoZW5kVGltZSwgJ0hIOm1tJykuZGlmZihtb21lbnQoc3RhcnRUaW1lLCAnSEg6bW0nKSwgJ21pbnV0ZXMnKTtcbiAgICB2YXIgc2xvdExlbmd0aCA9IG1vbWVudC5kdXJhdGlvbigoZXZlbnRMZW5ndGggLyA5KSwgJ21pbnV0ZXMnKS5hc01pbnV0ZXMoKTtcbiAgICBjb25zb2xlLmxvZyhtb21lbnQoc3RhcnRUaW1lLCAnSEg6bW0nKS5hZGQoKHNsb3RMZW5ndGggKiA4KSwgJ21pbnV0ZXMnKS5mb3JtYXQoJ2g6bW0gQScpKTtcblxuICAgIC8vIEluaXRpYWxpemUgVUkgR3JpZCB2YXJpYWJsZXNcbiAgICB2YXIgZ3JpZENvbHMgPSBbXTtcbiAgICB2YXIgZ3JpZERhdGEgPSBbXTtcblxuICAgIC8vIFVJIEdyaWQgb3B0aW9uc1xuICAgICRzY29wZS5ncmlkT3B0aW9ucyA9IHtcbiAgICAgICAgZW5hYmxlU29ydGluZzogZmFsc2UsXG4gICAgICAgIGVuYWJsZUdyaWRNZW51OiB0cnVlLFxuICAgICAgICBlbmFibGVGaWx0ZXJpbmc6IGZhbHNlLFxuICAgICAgICBvblJlZ2lzdGVyQXBpOiBmdW5jdGlvbiAoZ3JpZEFwaSkge1xuICAgICAgICAgICAgJHNjb3BlLmdyaWRBcGkgPSBncmlkQXBpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIFwiR2VuZXJhdGVcIiBidXR0b24gY2xpY2sgZnVuY3Rpb25cbiAgICAkc2NvcGUuZ2VuZXJhdGUgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgLy8gcmVxdWVzdCBtYXRjaGVzIGZyb20gc2VydmVyIGdpdmVuIGV2ZW50IHNldHRpbmdzXG4gICAgICAgICRodHRwKHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjMwMDAvdGVzdCdcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpIHtcblxuICAgICAgICAgICAgLy8gZW1wdHkgdGhlIFVJIEdyaWQgdmFyaWFibGVzIGluIGNhc2UgdGhlcmUgaXMgZGF0YVxuICAgICAgICAgICAgJHNjb3BlLmdyaWRPcHRpb25zLmNvbHVtbkRlZnMgPSBbXTtcbiAgICAgICAgICAgICRzY29wZS5ncmlkT3B0aW9ucy5kYXRhID0gW107XG4gICAgICAgICAgICBncmlkQ29scyA9IFtdO1xuICAgICAgICAgICAgZ3JpZERhdGEgPSBbXTtcblxuICAgICAgICAgICAgLy8gY29uc29sZSBsb2cgQVBJIHJlc3BvbnNlIGZvciBkZWJ1Z2dpbmdcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcblxuICAgICAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIHRoZSBpbnRlcnZpZXdlciBhcnJheSB3aXRoaW4gdGhlIHJlc3BvbnNlXG4gICAgICAgICAgICAvLyBjcmVhdGUgdmFyaW91cyBhcnJheXMgYW5kIG9iamVjdHMgdG8gbWVldCBVSSBHcmlkIGRhdGEgcmVxdWlyZW1lbnRzXG4gICAgICAgICAgICByZXNwb25zZS5kYXRhLmludGVydmlld2VyLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgcG9zKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBwdXNoIHRoZSBjb21wYW55IGFuZCBpbnRlcnZpZXdlciBuYW1lIGludG8gdGhlIGNvbHVtbiBuYW1lcyBhcnJheVxuICAgICAgICAgICAgICAgIC8vIHRoaXMgd2lsbCBiZSB0aGUgY29sdW1uIGhlYWRlciBmb3IgYSBwYXJ0aWN1bGFyIGludGVydmlld2VyXG4gICAgICAgICAgICAgICAgZ3JpZENvbHMucHVzaCh7bmFtZTogaXRlbS5jb21wYW55ICsgJyAvICcgKyBpdGVtLmZOYW1lLCBmaWVsZDogaXRlbS5jb21wYW55ICsgJ18nICsgaXRlbS5uYW1lLCB3aWR0aDoxNTAsIGRpc3BsYXlOYW1lOiBpdGVtLmNvbXBhbnkgKyAnIC8gJyArIGl0ZW0uZk5hbWV9KTtcblxuICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgc2NoZWR1bGVkIG9iamVjdCB0byBhIHZhcmlhYmxlXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBvYmplY3QgY29udGFpbnMgdGhlIGVudGlyZSBzY2hlZHVsZSBmb3IgYW4gaW50ZXJ2aWV3ZXJcbiAgICAgICAgICAgICAgICB2YXIgc2NoZWQgPSBpdGVtLnNjaGVkdWxlZDtcblxuICAgICAgICAgICAgICAgIC8vIGluaXRpYXRlIGFuIGVtcHR5IHN0dWRlbnRzIGFycmF5XG4gICAgICAgICAgICAgICAgLy8gdGhpcyB3aWxsIGJlIHVzZWQgdG8gc3RvcmUgdGhlIGZvcm1hdHRlZCBzY2hlZHVsZSBmb3IgZWFjaCBjb21wYW55XG4gICAgICAgICAgICAgICAgdmFyIHN0dWRlbnRzID0gW107XG5cbiAgICAgICAgICAgICAgICAvLyBpdGVyYXRlIG92ZXIgdGhlIHNjaGVkdWxlZCBvYmplY3QgdXNpbmcgdGhlIGdldE93blByb3BlcnR5TmFtZXMgbWV0aG9kXG4gICAgICAgICAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc2NoZWQpLmZvckVhY2goZnVuY3Rpb24gKGVsZW0sIGluZGV4LCBhcnJheSkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhbiBhcnJheSBvZiBvYmplY3RzIHRoYXQgY29udGFpbnMgZWFjaCBzY2hlZHVsZWQgaXRlbVxuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGFycmF5IHdpbGwgY29udGFpbiB0aGUgZm9ybWF0dGVkIHNjaGVkdWxlIGZvciBhbiBpbnRlcnZpZXdlclxuICAgICAgICAgICAgICAgICAgICB0aXRsZU9iaiA9IHt9O1xuICAgICAgICAgICAgICAgICAgICB0aXRsZU9ialtpdGVtLmNvbXBhbnkgKyAnXycgKyBpdGVtLmZuYW1lXSA9IHNjaGVkW2VsZW1dO1xuICAgICAgICAgICAgICAgICAgICBzdHVkZW50cy5wdXNoKHRpdGxlT2JqKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBwdXNoIHRoZSB1cGRhdGVkIHNjaGVkdWxlIGFycmF5IGludG8gdGhlIG1hc3RlciBncmlkRGF0YSBhcnJheVxuICAgICAgICAgICAgZ3JpZERhdGEucHVzaChzdHVkZW50cyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gZ3JpZERhdGEgaXMgc3RpbGwgbm90IGNvcnJlY3RseSBmb3JtYXR0ZWRcbiAgICAgICAgICAgIC8vIGVhY2ggaXRlbSByZXByZXNlbnRzIGFuIGludGVydmlld2VyIGNvbHVtblxuICAgICAgICAgICAgLy8gd2hlbiBpbiBmYWN0LCBVSSBHcmlkIHJlcXVpcmVzIGVhY2ggaXRlbSBpbiB0aGUgYXJyYXkgdG8gYmUgYSByb3cgb2YgZGF0YVxuICAgICAgICAgICAgLy8gVW5kZXJzY29yZSB1bnppcCBmdW5jdGlvbiBwZXJmb3JtcyBuZWNlc3NhcnkgbWF0cml4IHRyYW5zZm9ybWF0aW9uXG4gICAgICAgICAgICBncmlkRGF0YSA9IF8udW56aXAoZ3JpZERhdGEpO1xuXG4gICAgICAgICAgICAvLyBpbml0aWF0ZSBlbXB0eSBhcnJheSB0byBzdG9yZSBlYWNoIHJvdyBhcyBhbiBvYmplY3Qgb2Ygb2JqZWN0c1xuICAgICAgICAgICAgdmFyIGdyaWRBcnIgPSBbXTtcblxuICAgICAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIHVuemlwcGVkIGdyaWREYXRhXG4gICAgICAgICAgICBncmlkRGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBwb3MpIHtcblxuICAgICAgICAgICAgICAgIC8vIGluaXRpYXRlIGVtcHR5IG9iamVjdCBmb3Igc3RvcmluZyBpbmRpdmlkdWFsIHNjaGVkdWxlIGl0ZW1zXG4gICAgICAgICAgICAgICAgdmFyIHJvd09iaiA9IHt9O1xuXG4gICAgICAgICAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIHRoZSBzY2hlZHVsZSByb3dcbiAgICAgICAgICAgICAgICAvLyBlYWNoIGl0ZW0gaW4gdGhlIHJvdyBhcnJheSByZXByZXNlbnRzIGEgc2luZ2xlIGNlbGwgaW4gdGhlIGdyaWRcbiAgICAgICAgICAgICAgICBpdGVtLmZvckVhY2goZnVuY3Rpb24gKGVsZW0sIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHVzZSBVbmRlcnNjb3JlIGV4dGVuZCBtZXRob2QgdG8gXCJwdXNoXCIgZWFjaCBpdGVtIGludG8gcm93IG9iamVjdFxuICAgICAgICAgICAgICAgICAgICBfLmV4dGVuZChyb3dPYmosIGVsZW0pO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gcHVzaCB0aGUgcm93IG9iamVjdCBpbnRvIHRoZSBwcmV2aW91c2x5IGluaXRpYXRlZCBncmlkIGFycmF5XG4gICAgICAgICAgICAgICAgZ3JpZEFyci5wdXNoKHJvd09iaik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gaW5pdGlhdGUgYW4gZW1wdHkgb2JqZWN0IGZvciBzdG9yaW5nIHRoZSBlbnRpcmUgc2NoZWR1bGVcbiAgICAgICAgICAgIGdyaWRPYmogPSB7fTtcblxuICAgICAgICAgICAgLy8gY3JlYXRlIHRpbWUgc2xvdHMgY29sdW1uXG4gICAgICAgICAgICB2YXIgdGltZVNsb3RzID0gW107XG4gICAgICAgICAgICB2YXIgc2xvdHNTaXplID0gZ3JpZEFyci5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZShzbG90c1NpemUtLSkge1xuICAgICAgICAgICAgICAgIHRpbWVTbG90cy5wdXNoKHt0aW1lOiAnU2xvdCAnICsgKChncmlkQXJyLmxlbmd0aCkgLSBzbG90c1NpemUpfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRpbWVTbG90cyk7XG5cbiAgICAgICAgICAgIC8vIHVzaW5nIFVuZGVyc2NvcmUgZXh0ZW5kIGFnYWluLCBcInB1c2hcIiB0aGUgYXJyYXkgb2Ygb2JqZWN0cyBpbnRvIHRoZSBtYXN0ZXIgb2JqZWN0XG4gICAgICAgICAgICBfLmV4dGVuZChncmlkT2JqLCBncmlkQXJyKTtcblxuICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBncmlkRGF0YSB2YXJpYWJsZVxuICAgICAgICAgICAgZ3JpZERhdGEgPSBncmlkQXJyO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAvLyBhZnRlciBjYXB0dXJpbmcgYW5kIGZvcm1hdHRpbmcgdGhlIGRhdGEsIHVwZGF0ZSBVSSBHcmlkIG9wdGlvbnNcbiAgICAgICAgICAgICRzY29wZS5ncmlkT3B0aW9ucy5jb2x1bW5EZWZzID0gZ3JpZENvbHM7XG4gICAgICAgICAgICAkc2NvcGUuZ3JpZE9wdGlvbnMuZGF0YSA9IGdyaWREYXRhO1xuICAgICAgICB9KVxuICAgIH07XG59XSk7IiwiXG4vKlxuIE5ldyBldmVudCBjb250cm9sbGVyXG4gICovXG5hcHAuY29udHJvbGxlcignbmV3RXZlbnRDdHJsJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnJGxvY2F0aW9uJywgJyRmaWx0ZXInLCBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkbG9jYXRpb24sICRmaWx0ZXIpIHtcbiAgICAkc2NvcGUuc3VibWl0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIGV2ZW50ID0ge1xuICAgICAgICAgICAgdHlwZTogJHNjb3BlLmV2ZW50VHlwZSxcbiAgICAgICAgICAgIGNvaG9ydDogJHNjb3BlLmNvaG9ydCxcbiAgICAgICAgICAgIGRhdGU6ICRzY29wZS5kYXRlLFxuICAgICAgICAgICAgbG9jYXRpb246ICRzY29wZS5sb2NhdGlvbixcbiAgICAgICAgICAgIHN0YXJ0VGltZTogJGZpbHRlcignZGF0ZScpKG5ldyBEYXRlKCRzY29wZS5zVGltZSksICdISDptbScpLFxuICAgICAgICAgICAgZW5kVGltZTogJGZpbHRlcignZGF0ZScpKG5ldyBEYXRlKCRzY29wZS5lVGltZSksICdISDptbScpLFxuICAgICAgICAgICAgaW50ZXJ2aWV3RHVyYXRpb246ICRzY29wZS5zbG90RHVyLFxuICAgICAgICAgICAgb3JnYW5pemVyOiAkc2NvcGUub3JnYW5pemVyXG4gICAgICAgIH07XG5cbiAgICAgICAgJGh0dHAoe1xuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICB1cmw6ICdhcGkvZXZlbnQnLFxuICAgICAgICAgICAgZGF0YTogZXZlbnRcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiBzdWNjZXNzKGRhdGEpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcigpIHt9KS50aGVuKGZ1bmN0aW9uIHJlZGlyZWN0KCkge1xuICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9ldmVudHMnKVxuICAgICAgICB9KVxuICAgIH1cbn1dKTsiLCJcbi8qXG4gVmlldyBldmVudHMgY29udHJvbGxlclxuICovXG5hcHAuY29udHJvbGxlcigndmlld0V2ZW50Q3RybCcsIFsnJHNjb3BlJywgJyRodHRwJywgJyRmaWx0ZXInLCAnJHJvdXRlUGFyYW1zJywgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgJGZpbHRlciwgJHJvdXRlUGFyYW1zKSB7XG5cbiAgICB2YXIgZXZlbnRQYXJhbSA9ICRyb3V0ZVBhcmFtcy5faWQ7XG5cbiAgICAkaHR0cC5nZXQoJy9hcGkvZXZlbnQ/X2lkPScgKyBldmVudFBhcmFtKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcblxuICAgICAgICAkc2NvcGUuZXZlbnRUaXRsZSA9IHJlc3BvbnNlLmRhdGFbMF0uY29ob3J0ICsgJyAnICsgcmVzcG9uc2UuZGF0YVswXS50eXBlXG5cbiAgICB9LCBmdW5jdGlvbiBlcnJvcigpIHt9KTtcblxufV0pOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
