var app=angular.module("app",["ngMaterial","ngRoute"]);app.config(["$routeProvider","$locationProvider",function(e,t){t.html5Mode({enabled:!0}),e.when("/home",{templateUrl:"views/partials/home.html"}).when("/",{templateUrl:"views/partials/login/login.html"}).when("/forgot",{templateUrl:"views/partials/forgot/forgot.html"}).when("/events",{templateUrl:"views/partials/events/events.html"}).when("/students",{templateUrl:"views/partials/students/students.html"}).when("/interviewers",{templateUrl:"views/partials/interviewers/interviewers.html"}).when("/archived-events",{templateUrl:"views/partials/archived-events/archived-events.html"}).when("/profile",{templateUrl:"views/partials/profile/profile.html"}).when("/logout",{templateUrl:"views/partials/logout/logout.html"}).when("/new-event",{templateUrl:"views/partials/new-event/new-event.html"}).when("/:token",{templateUrl:"views/partials/reset/reset.html",controller:"reset"}).otherwise({redirectTo:"/views/partials/login.html"})}]),app.controller("student",["$scope","$mdDialog",function(e,t){function o(e){e.close=function(){t.hide(),e.companies=[{name:"Prime"},{name:"Nerdery"},{name:"Digital People"}],e.events=[{name:"mocks Delta"},{name:"career Delta"},{name:"mocks Epsilon"}]}}e.openStudents=function(e){t.show({controller:o,templateUrl:"views/partials/dialogs/student.dialog.html",parent:angular.element(document.body),targetEvent:e,clickOutsideToClose:!0})}}]),app.controller("interviewer",["$scope","$mdDialog",function(e,t){function o(e,t){e.close=function(){t.hide()},e.cohorts=[{name:"Delta"},{name:"gamma"},{name:"Epsilon"}],e.events=[{name:"mocks Delta"},{name:"career Delta"},{name:"mocks Epsilon"}]}e.openInterviewer=function(e){t.show({controller:o,templateUrl:"views/partials/dialogs/interviewer.dialog.html",parent:angular.element(document.body),targetEvent:e,clickOutsideToClose:!0})}}]),app.controller("uploads",["$scope","$mdDialog",function(e,t){function o(e,t){e.close=function(){t.hide()}}e.openUploads=function(){t.show({controller:o,templateUrl:"views/partials/dialogs/upload.dialog.html",parent:angular.element(document.body),clickOutsideToClose:!0})}}]),app.controller("registerOpen",["$scope","$mdDialog","$http",function(e,t){function o(e,t,o){e.register=function(e,n,a){t.post("/api/users",{username:e,email:n,password:a}).then(function(e){console.log(e),200==e&&o.hide()})},e.close=function(){o.hide()}}e.openRegister=function(e){t.show({controller:o,templateUrl:"views/partials/dialogs/register.dialog.html",parent:angular.element(document.body),targetEvent:e,clickOutsideToClose:!0})}}]),app.controller("sendEmail",["$scope","$http","$location",function(e,t,o){e.send=function(e){t.post("/forgot",{email:e}).then(function(e){200==e.status&&o.path("/")})}}]),app.controller("login",["$rootScope","$scope","$http","$location","$mdToast",function(e,t,o,n,a){t.submit=function(t,l){o.post("/authenticate",{username:t,password:l}).then(function(t){t.data.token?(sessionStorage.username=angular.toJson(t.data.user.username),sessionStorage.email=angular.toJson(t.data.user.email),sessionStorage.token=angular.toJson(t.data.token),n.path("/events"),e.$broadcast("logged In")):a.showSimple(t.data.error)})}}]),app.controller("toolbar",["$rootScope","$scope","$window",function(e,t,o){t.user=o.sessionStorage,t.paths=!0,e.$on("logged In",function(){void 0==o.sessionStorage.token?t.paths=!0:t.paths=!1})}]),app.controller("reset",["$scope","$http","$routeParams","$location",function(e,t,o,n){e.changePass=function(e,a){console.log(e);var l=o.token;e===a&&t.post("/reset",{password:e,token:l}).then(function(e){console.log(e),200===e.status&&n.path("/")})}}]),app.controller("logout",["$rootScope","$scope","$location","$interval",function(e,t,o,n){t.logout=function(){o.path("/logout"),sessionStorage.clear(),e.$broadcast("logged In"),n(function(){o.path("/")},3e3,1)}}]),app.directive("verifySame",function(){return{require:"ngModel",scope:{otherModelValue:"=compareTo"},link:function(e,t,o,n){n.$validators.compareTo=function(t){return t==e.otherModelValue},e.$watch("password",function(){n.$validate()})}}}),angular.module("app").controller("eventsCtrl",function(e){function t(e){var t,o=[];return t=angular.extend({},e),t.title=t.title,t.span={row:1,col:1},t.background="gray",t.span.row=t.span.col=1,o.push(t),o}this.tiles=t({title:"Event Title",background:""})});
//# sourceMappingURL=data:application/json;base64,
