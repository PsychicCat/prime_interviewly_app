var app = angular.module('app', ['ngMaterial', 'ngRoute', 'ngMessages', 'ui.grid', 'ui.grid.edit', 'ui.grid.rowEdit', 'ui.grid.exporter']);

/*
 Angular routing
  */
app.config(['$routeProvider', '$locationProvider', function($routeProvider, $locationProvider){
    $locationProvider.html5Mode({
        enabled: true
    });
    $routeProvider.
        when('/home', {
            templateUrl: 'views/partials/home/home.html'
        }).
        when('/', {
            templateUrl: 'views/partials/account/login/login.html'
        }).
        when('/forgot', {
            templateUrl: 'views/partials/account/forgot/forgot.html'
        }).
        when('/events', {
            templateUrl: 'views/partials/events/events.html'
        }).
        when('/students', {
            templateUrl: 'views/partials/students/students.html'
        }).
        when('/interviewers', {
            templateUrl: 'views/partials/interviewers/interviewers.html'
        }).
        when('/archived-events', {
            templateUrl: 'views/partials/events/archived-events/archived-events.html'
        }).
        when('/profile', {
            templateUrl: 'views/partials/account/profile/profile.html'
        }).
        when('/logout', {
            templateUrl: 'views/partials/account/logout/logout.html'
        }).
        when('/new-event', {
            templateUrl: 'views/partials/events/new-event/new-event.html'
        }).
        when('/reset/:token', {
            templateUrl: 'views/partials/account/reset/reset.html',
            controller: 'reset'
        }).
        otherwise({
            redirectTo: '/'
    })
}]);

/*
Toolbar controller
 */
app.controller('toolbar', ['$rootScope','$location','$scope', '$window', function($rootScope, $location, $scope, $window){
    $scope.paths = true;
    $rootScope.$on('logged In', function(){
        if($window.sessionStorage.token == undefined){
            $scope.paths = true;
        }else{
            $scope.paths = false;
            $scope.user = {
                username: $window.sessionStorage.username.replace(/^"(.*)"$/, '$1')
            };
        }
    });
    $scope.goHome = function(){
        $location.path('/');
    }
}]);
// Directive to check the passwords are the same
app.directive("passwordVerify", function() {
    return {
        require: "ngModel",
        scope: {
            passwordVerify: '='
        },
        link: function(scope, element, attrs, ctrl) {
            scope.$watch(function() {
                var combined;

                if (scope.passwordVerify || ctrl.$viewValue) {
                    combined = scope.passwordVerify + '_' + ctrl.$viewValue;
                }
                return combined;
            }, function(value) {
                if (value) {
                    ctrl.$parsers.unshift(function(viewValue) {
                        var origin = scope.passwordVerify;
                        if (origin !== viewValue) {
                            ctrl.$setValidity("passwordVerify", false);
                            return undefined;
                        } else {
                            ctrl.$setValidity("passwordVerify", true);
                            return viewValue;
                        }
                    });
                }
            });
        }
    };
});
app.controller('interviewers', ['$scope', '$http', function($scope, $http){
 $scope.submit = function(){
  $http.get('/api/interviewer').then(function(response){
   console.log(response);
  })
 }
}]);

/*
Home controller
 */
app.controller('students', ['$scope', '$http', '$mdDialog', function($scope, $http, $mdDialog){
    $scope.submit = function() {
        $http.get('/api/student').then(function (response) {
            console.log(response);
            $scope.students = response.data
        })
    };
    $scope.editStudent = function(ev, id) {
        $http.get('/api/student?_id=' + id).then(function (response) {
            $mdDialog.show({
                controller: editStudent(response),
                templateUrl: 'views/partials/dialogs/student/studentEdit.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true
            })
        })
    };
        function editStudent(response){
            console.log(response);
            var info = response.data[0];
            $scope.student = {
            fname: info.fName,
            lname: info.lName,
            email: info.email,
            cohort: info.cohort
        };
            console.log($scope.student);
    }
}]);

/*
 Events controller
  */
app.controller('eventsCtrl', function($scope) {
        this.tiles = buildGridModel({
            title: "Event Title",
            background: ""
        });
        function buildGridModel(tileTmpl){
            var it, results = [ ];
                it = angular.extend({},tileTmpl);
                it.title = it.title;
                it.span  = { row : 1, col : 1 };
                it.background = "gray";
                it.span.row = it.span.col = 1;

                results.push(it);

            return results;
        }
    });


app.controller('modalCtrl', function($scope, $mdDialog) {
    $scope.alert = '';
    $scope.showAlert = function (ev) {
        $mdDialog.show(
            $mdDialog.alert()
                .parent(angular.element(document.body))
                .title('You are about to Archive this Event!')
                .content('Click to confirm. You can access this Event at any time in Archived Events.')
                .ariaLabel('Alert Dialog Demo')
                .ok('Got it!')
                .targetEvent(ev)
        );
    };
    $scope.showConfirm = function (ev) {
        // Appending dialog to document.body to cover sidenav in docs app
        var confirm = $mdDialog.confirm()
            .title('Would you like to delete this Event?')
            .content('This will permanently delete this Event.')
            .ariaLabel('Confirm Dialog Demo')
            .targetEvent(ev)
            .ok('Yes, delete this Event!')
            .cancel('No way, that was close!');

        $mdDialog.show(confirm).then(function () {
            $scope.status = 'You deleted this event.';
        }, function () {
            $scope.status = 'You did not delete this event.';
        });
    };
    $scope.showAdvanced = function(ev) {
        $mdDialog.show({
            controller: DialogController,
            templateUrl: 'dialog1.tmpl.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose:true
        })
            .then(function(answer) {
                $scope.status = 'You said the information was "' + answer + '".';
            }, function() {
                $scope.status = 'You cancelled the dialog.';
            });
    };
});
function DialogController($scope, $mdDialog) {
    $scope.hide = function() {
        $mdDialog.hide();
    };
    $scope.cancel = function() {
        $mdDialog.cancel();
    };
    $scope.answer = function(answer) {
        $mdDialog.hide(answer);
    };
}

/*
Register dialog controller
 */
app.controller('registerOpen', ['$scope', '$mdDialog', '$http', function($scope, $mdDialog){
    $scope.openRegister = function(ev){
        $mdDialog.show({
            controller: register,
            templateUrl: 'views/partials/dialogs/register/register.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose: true
        })
    };
    function register($scope, $http, $mdDialog) {
        $scope.register = function(username, email, password){
            $http.post('/api/users', {
                username: username,
                email: email,
                password: password
            }).then(function(response){
                console.log(response);
                if(response == 200) {
                    $mdDialog.hide()
                }
            });
        };
        $scope.close = function(){
            $mdDialog.hide();
        };
    }
}]);

/*
Student dialog controller
 */
app.controller('student', ['$scope', '$mdDialog', function($scope,$mdDialog){
    $scope.openStudents = function(ev){
        $mdDialog.show({
            controller: addStudent,
            templateUrl: 'views/partials/dialogs/student/student.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose: true
        })
    };
    function addStudent($scope) {
        $scope.close = function () {
            $mdDialog.hide();
            $scope.companies = [
                {name: 'Prime'},
                {name: 'Nerdery'},
                {name: 'Digital People'}
            ];
            $scope.events = [
                {name: 'mocks Delta'},
                {name: 'career Delta'},
                {name: 'mocks Epsilon'}
            ];
        };
        $scope.submit = function(fname, lname, email, cohort){
            var student = {
                fname: fname,
                lname: lname,
                email: email,
                cohort: cohort
            };
            console.log(student);
        }
    }

}]);

/*
Interviewer dialog controller
 */
app.controller('interviewer', ['$scope', '$mdDialog', function($scope, $mdDialog){
    $scope.openInterviewer = function(ev){
        $mdDialog.show({
            controller: addInterviewer,
            templateUrl: 'views/partials/dialogs/interviewer/interviewer.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose: true
        })
    };
    function addInterviewer($scope){
        $scope.close = function() {
            $mdDialog.hide();
            $scope.cohorts = [
                {name: 'Delta'},
                {name: 'gamma'},
                {name: 'Epsilon'}
            ];
            $scope.events = [
                {name: 'mocks Delta'},
                {name: 'career Delta'},
                {name: 'mocks Epsilon'}
            ];
        };
        $scope.submit = function(fname, lname, title, company, link, desc){
            var interviewer = {
                fName: fname,
                lName: lname,
                title: title,
                company: company,
                link: link,
                description: desc
            };
            console.log(interviewer);
        };
    }
}]);

/*
Student dialog controller
 */
app.controller('uploads', ['$scope', '$mdDialog', function($scope, $mdDialog){
    $scope.openUploads = function(ev){
        $mdDialog.show({
            controller: uploadFile,
            templateUrl: 'views/partials/dialogs/upload/upload.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose: true
        })
    };
    function uploadFile($scope, $mdDialog){

        $scope.submit = function(file){
            var mine = {
                file: file
            };
        console.log(mine);
        };
        $scope.close = function() {
            $mdDialog.hide();
        }
    }
}]);

/*
Generate event controller
 */
app.controller('generateCtrl', ['$scope', '$http', function($scope, $http) {

    // time experiments
    var startTime = moment('1:00 PM', 'h:mm A').format('HH:mm');
    var endTime = moment('4:00 PM', 'h:mm A').format('HH:mm');
    var eventLength = moment(endTime, 'HH:mm').diff(moment(startTime, 'HH:mm'), 'minutes');
    var slotLength = moment.duration((eventLength / 9), 'minutes').asMinutes();
    console.log(moment(startTime, 'HH:mm').add((slotLength * 8), 'minutes').format('h:mm A'));

    // Initialize UI Grid variables
    var gridCols = [];
    var gridData = [];

    // UI Grid options
    $scope.gridOptions = {
        enableSorting: false,
        enableGridMenu: true,
        enableFiltering: false,
        onRegisterApi: function (gridApi) {
            $scope.gridApi = gridApi;
        }
    };

    // "Generate" button click function
    $scope.generate = function () {

        // request matches from server given event settings
        $http({
            method: 'GET',
            url: 'http://localhost:3000/test'
        }).then(function successCallback(response) {

            // empty the UI Grid variables in case there is data
            $scope.gridOptions.columnDefs = [];
            $scope.gridOptions.data = [];
            gridCols = [];
            gridData = [];

            // console log API response for debugging
            console.log(response);

            // iterate over the interviewer array within the response
            // create various arrays and objects to meet UI Grid data requirements
            response.data.interviewer.forEach(function(item, pos) {

                // push the company and interviewer name into the column names array
                // this will be the column header for a particular interviewer
                gridCols.push({name: item.company + ' / ' + item.fName, field: item.company + '_' + item.name, width:150, displayName: item.company + ' / ' + item.fName});

                // set the scheduled object to a variable
                // this object contains the entire schedule for an interviewer
                var sched = item.scheduled;

                // initiate an empty students array
                // this will be used to store the formatted schedule for each company
                var students = [];

                // iterate over the scheduled object using the getOwnPropertyNames method
                Object.getOwnPropertyNames(sched).forEach(function (elem, index, array) {
                    // create an array of objects that contains each scheduled item
                    // this array will contain the formatted schedule for an interviewer
                    titleObj = {};
                    titleObj[item.company + '_' + item.fname] = sched[elem];
                    students.push(titleObj);
            });

            // push the updated schedule array into the master gridData array
            gridData.push(students);
            });

            // gridData is still not correctly formatted
            // each item represents an interviewer column
            // when in fact, UI Grid requires each item in the array to be a row of data
            // Underscore unzip function performs necessary matrix transformation
            gridData = _.unzip(gridData);

            // initiate empty array to store each row as an object of objects
            var gridArr = [];

            // iterate over unzipped gridData
            gridData.forEach(function (item, pos) {

                // initiate empty object for storing individual schedule items
                var rowObj = {};

                // iterate over the schedule row
                // each item in the row array represents a single cell in the grid
                item.forEach(function (elem, index) {
                    // use Underscore extend method to "push" each item into row object
                    _.extend(rowObj, elem);
                });

                // push the row object into the previously initiated grid array
                gridArr.push(rowObj);
            });

            // initiate an empty object for storing the entire schedule
            gridObj = {};

            // create time slots column
            var timeSlots = [];
            var slotsSize = gridArr.length;
            while(slotsSize--) {
                timeSlots.push({time: 'Slot ' + ((gridArr.length) - slotsSize)});
            }

            console.log(timeSlots);

            // using Underscore extend again, "push" the array of objects into the master object
            _.extend(gridObj, gridArr);

            // update the gridData variable
            gridData = gridArr;
        }).then(function() {

            // after capturing and formatting the data, update UI Grid options
            $scope.gridOptions.columnDefs = gridCols;
            $scope.gridOptions.data = gridData;
        })
    };
}]);

/*
Archived events controller
 */

/*
 New event controller
  */
app.controller('newEventCtrl', ['$scope', '$http', '$location', function($scope, $http, $location) {
    $scope.submit = function() {

        var event = {
            type: $scope.eventType,
            cohort: $scope.cohort,
            date: $scope.date,
            location: $scope.location,
            startTime: $scope.sTime,
            endTime: $scope.eTime,
            interviewDuration: $scope.slotDur,
            organizer: $scope.organizer
        };

        $http({
            method: 'POST',
            url: 'api/event',
            data: event
        }).then(function success(data) {
            console.log(data);
        }, function error() {}).then(function redirect() {
            $location.path('/events')
        })
    }
}]);

/*
 Logout controller
  */
app.controller('logout', ['$rootScope', '$scope','$location', '$interval', function($rootScope, $scope, $location, $interval){
    $scope.logout = function(){
        $location.path('/logout');
        sessionStorage.clear();
        $rootScope.$broadcast('logged In');
        $interval(function() {
            $location.path('/')
        }, 3000, 1)
    };
}]);

/*
 Forgot controller
  */
app.controller('sendEmail', ['$scope', '$http', '$location', function($scope, $http, $location){
    $scope.send = function(email) {
        $http.post('/forgot', {email: email}).then(function (response) {
            if (response.status == 200) {
                $location.path('/')
            }
        })
    }
}]);

/*
 Login controller
  */
app.controller('login', ['$rootScope','$scope', '$http', '$location', '$mdToast', function($rootScope, $scope, $http, $location, $mdToast){
    $scope.submit = function(username, password){
        $http.post('/authenticate', {username: username, password: password}).then(function(response){
                if(response.data.token){
                    sessionStorage.username = angular.toJson(response.data.user.username);
                    sessionStorage.email = angular.toJson(response.data.user.email);
                    sessionStorage.token = angular.toJson(response.data.token);
                    $location.path('/events');
                    $rootScope.$broadcast('logged In')
                }else{
                    $mdToast.showSimple(response.data.error)
                }

            }

        )
    };
    $scope.forgot = function(){
        $location.path('/forgot');
    }
}]);

/*
 Profile controller
  */
app.controller('profile', ['$scope', '$http', '$window', '$location', function($scope, $http, $window, $location){
    $scope.username = $window.sessionStorage.username.replace(/^"(.*)"$/, '$1');
    $scope.email = $window.sessionStorage.email.replace(/^"(.*)"$/, '$1');
    $scope.save = function(password){
        var username = $scope.username;
        var email = $scope.email;
        $http.post('/change', {username: username, email: email, password: password}).then(function(response){
            if(response.status === 200){
                $location.path('/events')
            }
        });
    };
    $scope.switch = function(){
        var off = disabled;
        var on = enabled;

        if($scope.enabled = off){
            $scope.enabled = on
        } else {
            $scope.enabled = off;
        }
        console.log($scope.enabled)
    }
}]);

/*
 Reset controller
  */
app.controller('reset',['$scope', '$http', '$routeParams', '$location', function($scope, $http, $routeParams, $location){
    $scope.changePass = function(password, confirm){
        console.log(password);
        var token = $routeParams.token;
        if(password === confirm){
            $http.post('/reset', {password: password, token: token}).then(function(response){
                console.log(response);
                if(response.status === 200){
                    $location.path('/');
                }
            })
        }
    }
}]);
//# sourceMappingURL=data:application/json;base64,
