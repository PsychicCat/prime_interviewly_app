var app = angular.module('app', ['ngMaterial', 'ngRoute', 'ngMessages', 'ui.grid', 'ui.grid.edit', 'ui.grid.rowEdit', 'ui.grid.exporter', 'ngFileUpload']);

/*
 Angular configuration
 */
app.config(['$routeProvider', '$locationProvider', '$mdThemingProvider', function($routeProvider, $locationProvider, $mdThemingProvider){

    // Color palette
    $mdThemingProvider.theme('default')
        .primaryPalette('blue-grey')
        .accentPalette('orange');

    // HTML5 mode
    $locationProvider.html5Mode({
        enabled: true
    });

    // Routes
    $routeProvider.
        when('/home', {
            templateUrl: 'views/partials/home/home.html'
        }).
        when('/', {
            templateUrl: 'views/partials/account/login/login.html'
        }).
        when('/forgot', {
            templateUrl: 'views/partials/account/forgot/forgot.html'
        }).
        when('/events', {
            templateUrl: 'views/partials/events/events-list/events-list.html'
        }).
        when('/event?:eventId', {
            templateUrl: 'views/partials/events/view-event/view-event.html'
        }).
        when('/event/add-students?:eventId', {
            templateUrl: 'views/partials/events/add-students/add-students.html'
        }).
        when('/event/add-interviewers?:eventId', {
            templateUrl: 'views/partials/events/add-interviewers/add-interviewers.html'
        }).
        when('/event/schedule?:eventId', {
            templateUrl: 'views/partials/events/schedule/schedule.html'
        }).
        when('/students', {
            templateUrl: 'views/partials/students/students.html'
        }).
        when('/interviewers', {
            templateUrl: 'views/partials/interviewers/interviewers.html'
        }).
        when('/archived-events', {
            templateUrl: 'views/partials/events/archived-events/archived-events.html'
        }).
        when('/profile', {
            templateUrl: 'views/partials/account/profile/profile.html'
        }).
        when('/logout', {
            templateUrl: 'views/partials/account/logout/logout.html'
        }).
        when('/new-event', {
            templateUrl: 'views/partials/events/new-event/new-event.html'
        }).
        when('/reset/:token', {
            templateUrl: 'views/partials/account/reset/reset.html',
            controller: 'reset'
        }).
        otherwise({
            redirectTo: '/'
    })
}]);

/*
Toolbar controller
 */
app.controller('toolbar', ['$rootScope','$location','$scope', '$window', function($rootScope, $location, $scope, $window){
    $scope.paths = true;
    $rootScope.$on('logged In', function(){
        if($window.sessionStorage.token == undefined){
            $scope.paths = true;
        }else{
            $scope.paths = false;
            $scope.user = {
                username: $window.sessionStorage.username.replace(/^"(.*)"$/, '$1')
            };
        }
    });
    $scope.goHome = function(){
        $location.path('/');
    }
}]);

/*
Directive to check the passwords are the same
 */
app.directive("passwordVerify", function() {
    return {
        require: "ngModel",
        scope: {
            passwordVerify: '='
        },
        link: function(scope, element, attrs, ctrl) {
            scope.$watch(function() {
                var combined;
                if (scope.passwordVerify || ctrl.$viewValue) {
                    combined = scope.passwordVerify + '_' + ctrl.$viewValue;
                }
                return combined;
            }, function(value) {
                if (value) {
                    ctrl.$parsers.unshift(function(viewValue) {
                        var origin = scope.passwordVerify;
                        if (origin !== viewValue) {
                            ctrl.$setValidity("passwordVerify", false);
                            return undefined;
                        } else {
                            ctrl.$setValidity("passwordVerify", true);
                            return viewValue;
                        }
                    });
                }
            });
        }
    };
});
app.controller('interviewers', ['$scope', '$http', function($scope, $http){
  $http.get('/api/interviewer').then(function(response){
   console.log(response);
   $scope.interviewers = response.data
  });
 $scope.editInterviewer = function(id) {
  $http.get('/api/interviewer?_id=' + id).then(function (response) {
   $scope.interviewer = response.data[0];
   $mdDialog.show({
    controller: 'editInterviewer',
    locals: {
     items: $scope.interviewer
    },
    templateUrl: 'views/partials/dialogs/interviewer/interviewerEdit.html',
    parent: angular.element(document.body),
    clickOutsideToClose: true
   })
  })
 }
}]);

app.controller('editInterviewer', ['$scope', '$mdDialog', 'items', function($scope, $mdDialog, items){
 $scope.interviewer = items;
 console.log(items);

 $scope.close = function(){
  $mdDialog.hide();
 }
}]);
app.controller('students', ['$scope', '$http', '$mdDialog', function($scope, $http, $mdDialog){
    $http.get('/api/student').then(function (response) {
        $scope.students = response.data
    });

    $scope.editStudent = function(id) {
        $http.get('/api/student?_id=' + id).then(function (response) {
            $scope.student = response.data[0];
            console.log('hello');
            $mdDialog.show({
                controller: 'editStudent',
                locals: {
                    items: $scope.student
                },
                templateUrl: 'views/partials/dialogs/student/studentEdit.html',
                parent: angular.element(document.body),
                clickOutsideToClose: true
            })
        })
    };
}]);
app.controller('editStudent', ['$scope', '$mdDialog', 'items', function($scope, $mdDialog, items){
    $scope.student = items;

    $scope.close = function(){
        $mdDialog.hide();
    }
}]);

/*
Home controller
 */

/*
Student dialog controller
 */
app.controller('student', ['$scope', '$mdDialog', function($scope,$mdDialog){
    $scope.openStudents = function(ev){
        $mdDialog.show({
            controller: addStudent,
            templateUrl: 'views/partials/dialogs/student/student.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose: true
        })
    };
    function addStudent($scope) {
        $scope.close = function () {
            $mdDialog.hide();
            $scope.companies = [
                {name: 'Prime'},
                {name: 'Nerdery'},
                {name: 'Digital People'}
            ];
            $scope.events = [
                {name: 'mocks Delta'},
                {name: 'career Delta'},
                {name: 'mocks Epsilon'}
            ];
        };
        $scope.submit = function(fname, lname, email, cohort){
            var student = {
                fname: fname,
                lname: lname,
                email: email,
                cohort: cohort
            };
            console.log(student);
        }
    }

}]);

/*
Interviewer dialog controller
 */
app.controller('interviewer', ['$scope', '$mdDialog', function($scope, $mdDialog){
    $scope.openInterviewer = function(ev){
        $mdDialog.show({
            controller: addInterviewer,
            templateUrl: 'views/partials/dialogs/interviewer/interviewer.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose: true
        })
    };
    function addInterviewer($scope){
        $scope.close = function() {
            $mdDialog.hide();
            $scope.cohorts = [
                {name: 'Delta'},
                {name: 'gamma'},
                {name: 'Epsilon'}
            ];
            $scope.events = [
                {name: 'mocks Delta'},
                {name: 'career Delta'},
                {name: 'mocks Epsilon'}
            ];
        };
        $scope.submit = function(fname, lname, title, company, link, desc){
            var interviewer = {
                fName: fname,
                lName: lname,
                title: title,
                company: company,
                link: link,
                description: desc
            };
            console.log(interviewer);
        };
    }
}]);

/*
Student dialog controller
 */
app.controller('uploads', ['$scope', '$mdDialog', 'Upload', '$routeParams', '$location', function($scope, $mdDialog, Upload, $location){
    $scope.openUploads = function(ev){
        $mdDialog.show({
            controller: uploadFile,
            templateUrl: 'views/partials/dialogs/upload/upload.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose: true
        })
    };
    function uploadFile($scope, $mdDialog, Upload, $location){

        var target = $location.path();

        // upload on file select or drop
        $scope.upload = function (file) {
            Upload.upload({
                url: '/api/upload',
                data: {file: file, target: target}
            }).then(function (resp) {
                console.log('Success ' + resp.config.data.file.name + 'uploaded. Response: ' + resp.data);
                $mdDialog.hide();
            }, function (resp) {
                console.log('Error status: ' + resp.status);
            }, function (evt) {
                var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
                console.log('progress: ' + progressPercentage + '% ' + evt.config.data.file.name);
            });
        };

        $scope.close = function() {
            $mdDialog.hide();
        }
    }
}]);

/*
Register dialog controller
 */
app.controller('registerOpen', ['$scope', '$mdDialog', '$http', function($scope, $mdDialog){
    $scope.openRegister = function(ev){
        $mdDialog.show({
            controller: register,
            templateUrl: 'views/partials/dialogs/register/register.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose: true
        })
    };
    function register($scope, $http, $mdDialog) {
        $scope.register = function(username, email, password){
            $http.post('/api/users', {
                username: username,
                email: email,
                password: password
            }).then(function(response){
                console.log(response);
                if(response == 200) {
                    $mdDialog.hide()
                }
            });
        };
        $scope.close = function(){
            $mdDialog.hide();
        };
    }
}]);

/*
 Logout controller
  */
app.controller('logout', ['$rootScope', '$scope','$location', '$interval', function($rootScope, $scope, $location, $interval){
    $scope.logout = function(){
        $location.path('/logout');
        sessionStorage.clear();
        $rootScope.$broadcast('logged In');
        $interval(function() {
            $location.path('/')
        }, 3000, 1)
    };
}]);

/*
 Login controller
  */
app.controller('login', ['$rootScope','$scope', '$http', '$location', '$mdToast', function($rootScope, $scope, $http, $location, $mdToast){
    $scope.submit = function(username, password){
        $http.post('/authenticate', {username: username, password: password}).then(function(response){
                if(response.data.token){
                    sessionStorage.username = angular.toJson(response.data.user.username);
                    sessionStorage.email = angular.toJson(response.data.user.email);
                    sessionStorage.token = angular.toJson(response.data.token);
                    $location.path('/events');
                    $rootScope.$broadcast('logged In')
                }else{
                    $mdToast.showSimple(response.data.error)
                }

            }

        )
    };
    $scope.forgot = function(){
        $location.path('/forgot');
    }
}]);

/*
 Forgot controller
  */
app.controller('sendEmail', ['$scope', '$http', '$location', function($scope, $http, $location){
    $scope.send = function(email) {
        $http.post('/forgot', {email: email}).then(function (response) {
            if (response.status == 200) {
                $location.path('/')
            }
        })
    }
}]);

/*
 Profile controller
  */
app.controller('profile', ['$scope', '$http', '$window', '$location', function($scope, $http, $window, $location){
    $scope.username = $window.sessionStorage.username.replace(/^"(.*)"$/, '$1');
    $scope.email = $window.sessionStorage.email.replace(/^"(.*)"$/, '$1');
    $scope.save = function(password){
        var username = $scope.username;
        var email = $scope.email;
        $http.post('/change', {username: username, email: email, password: password}).then(function(response){
            if(response.status === 200){
                $location.path('/events')
            }
        });
    };
    $scope.switch = function(){
        var off = disabled;
        var on = enabled;

        if($scope.enabled = off){
            $scope.enabled = on
        } else {
            $scope.enabled = off;
        }
        console.log($scope.enabled)
    }
}]);

/*
 Reset controller
  */
app.controller('reset',['$scope', '$http', '$routeParams', '$location', function($scope, $http, $routeParams, $location){
    $scope.changePass = function(password, confirm){
        console.log(password);
        var token = $routeParams.token;
        if(password === confirm){
            $http.post('/reset', {password: password, token: token}).then(function(response){
                console.log(response);
                if(response.status === 200){
                    $location.path('/');
                }
            })
        }
    }
}]);

/*
Archived events controller
 */

/*
 Events list controller
  */
app.controller('eventsCtrl', ['$scope', '$http', '$filter', function($scope, $http, $filter) {
    $http.get('/api/event').then(function success(response) {

        // set get request to a variable
        eventsList = response.data;

        // initialize an empty array for storing data to be used in ng-repeat
        var tiles = [];

        // iterate over response data and push objects into array for ng-repeat
        eventsList.forEach(function(item, pos) {
            tiles.push({title: title = item.cohort + ' ' + item.type, date: $filter('date')(new Date(item.date), 'MM/dd/yy'), _id: item._id});
        });

        // set scope tiles equal to the object array
        $scope.tiles = tiles;

    }, function error() {});

}]);


app.controller('modalCtrl', ['$scope', '$mdDialog', function($scope, $mdDialog) {
    $scope.alert = '';

    $scope.showAlert = function (ev) {
        // Appending dialog to document.body to cover sidenav in docs app
        var confirm = $mdDialog.confirm()
            .title('You are about to Archive this Event!')
            .content('Click to confirm. You can access this Event at any time in Archived Events.')
            .ariaLabel('Archive')
            .targetEvent(ev)
            .ok('Got it!')
            .cancel('Nevermind.');

        $mdDialog.show(confirm).then(function () {
            $scope.status = 'You archived this event.';
        }, function () {
            $scope.status = 'You did not archive this event.';
        });
    };

    $scope.showConfirm = function (ev) {
        // Appending dialog to document.body to cover sidenav in docs app
        var confirm = $mdDialog.confirm()
            .title('Would you like to delete this Event?')
            .content('This will permanently delete this Event.')
            .ariaLabel('Delete')
            .targetEvent(ev)
            .ok('Yes, delete this Event!')
            .cancel('No way, that was close!');

        $mdDialog.show(confirm).then(function () {
            $scope.status = 'You deleted this event.';
        }, function () {
            $scope.status = 'You did not delete this event.';
        });
    };
}]);

/*
Generate event controller
 */
app.controller('generateCtrl', ['$scope', '$http', function($scope, $http) {

    // time experiments
    var startTime = moment('1:00 PM', 'h:mm A').format('HH:mm');
    var endTime = moment('4:00 PM', 'h:mm A').format('HH:mm');
    var eventLength = moment(endTime, 'HH:mm').diff(moment(startTime, 'HH:mm'), 'minutes');
    var slotLength = moment.duration((eventLength / 9), 'minutes').asMinutes();
    console.log(moment(startTime, 'HH:mm').add((slotLength * 8), 'minutes').format('h:mm A'));

    // Initialize UI Grid variables
    var gridCols = [];
    var gridData = [];

    // UI Grid options
    $scope.gridOptions = {
        enableSorting: false,
        enableGridMenu: true,
        enableFiltering: false,
        onRegisterApi: function (gridApi) {
            $scope.gridApi = gridApi;
        }
    };

    // "Generate" button click function
    $scope.generate = function () {

        // request matches from server given event settings
        $http({
            method: 'GET',
            url: 'http://localhost:3000/test'
        }).then(function successCallback(response) {

            // empty the UI Grid variables in case there is data
            $scope.gridOptions.columnDefs = [];
            $scope.gridOptions.data = [];
            gridCols = [];
            gridData = [];

            // console log API response for debugging
            console.log(response);

            // iterate over the interviewer array within the response
            // create various arrays and objects to meet UI Grid data requirements
            response.data.interviewer.forEach(function(item, pos) {

                // push the company and interviewer name into the column names array
                // this will be the column header for a particular interviewer
                gridCols.push({name: item.company + ' / ' + item.fName, field: item.company + '_' + item.name, width:150, displayName: item.company + ' / ' + item.fName});

                // set the scheduled object to a variable
                // this object contains the entire schedule for an interviewer
                var sched = item.scheduled;

                // initiate an empty students array
                // this will be used to store the formatted schedule for each company
                var students = [];

                // iterate over the scheduled object using the getOwnPropertyNames method
                Object.getOwnPropertyNames(sched).forEach(function (elem, index, array) {

                    // create an array of objects that contains each scheduled item
                    // this array will contain the formatted schedule for an interviewer
                    titleObj = {};
                    titleObj[item.company + '_' + item.fname] = sched[elem];
                    students.push(titleObj);
            });

            // push the updated schedule array into the master gridData array
            gridData.push(students);
            });

            // gridData is still not correctly formatted
            // each item represents an interviewer column
            // when in fact, UI Grid requires each item in the array to be a row of data
            // Underscore unzip function performs necessary matrix transformation
            gridData = _.unzip(gridData);

            // initiate empty array to store each row as an object of objects
            var gridArr = [];

            // iterate over unzipped gridData
            gridData.forEach(function (item, pos) {

                // initiate empty object for storing individual schedule items
                var rowObj = {};

                // iterate over the schedule row
                // each item in the row array represents a single cell in the grid
                item.forEach(function (elem, index) {
                    // use Underscore extend method to "push" each item into row object
                    _.extend(rowObj, elem);
                });

                // push the row object into the previously initiated grid array
                gridArr.push(rowObj);
            });

            // initiate an empty object for storing the entire schedule
            gridObj = {};

            // create time slots column
            var timeSlots = [];
            var slotsSize = gridArr.length;
            while(slotsSize--) {
                timeSlots.push({time: 'Slot ' + ((gridArr.length) - slotsSize)});
            }

            console.log(timeSlots);

            // using Underscore extend again, "push" the array of objects into the master object
            _.extend(gridObj, gridArr);

            // update the gridData variable
            gridData = gridArr;
        }).then(function() {

            // after capturing and formatting the data, update UI Grid options
            $scope.gridOptions.columnDefs = gridCols;
            $scope.gridOptions.data = gridData;
        })
    };
}]);

/*
 New event controller
  */
app.controller('newEventCtrl', ['$scope', '$http', '$location', '$filter', function($scope, $http, $location, $filter) {
    $scope.submit = function() {

        var event = {
            type: $scope.eventType,
            cohort: $scope.cohort,
            date: $scope.date,
            location: $scope.location,
            startTime: $filter('date')(new Date($scope.sTime), 'HH:mm'),
            endTime: $filter('date')(new Date($scope.eTime), 'HH:mm'),
            interviewDuration: $scope.slotDur,
            organizer: $scope.organizer
        };

        $http({
            method: 'POST',
            url: 'api/event',
            data: event
        }).then(function success(data) {
            console.log(data);
        }, function error() {}).then(function redirect() {
            $location.path('/events')
        })
    }
}]);
app.controller('addInterviewer', ['$scope', '$http', '$routeParams', function($scope, $http, $routeParams){
    $http.get('/api/interviewer').then(function (response) {
        console.log(response);
        $scope.interviewers = response.data;
    });
    $http.get('/api/event?_id='+$routeParams._id).then(function(response){
        var added = response.data[0].interviewers.slice();
        var interviewers = $scope.interviewers;
        for(var i = 0; i < interviewers.length; i++){
            var interviewer = interviewers[i];
            for(var j = 0; j < added.length; j++){
                if(interviewer._id === added[j]._id){
                    interviewer.added = true;
                }
            }
        }
        console.log($scope.added);
        console.log($scope.students);

    });

    var eventParam = $routeParams._id;
    $scope.eventId = eventParam;
    console.log(eventParam);
    console.log($routeParams);

    $scope.addInterviewer = function(id) {
        $http({
            method: 'POST',
            url: '/api/event/addInterviewer?_id=' + eventParam,
            data: {_id: id}
        }).then(function success(response) {
            var added = response.data.interviewers.slice();
            var interviewers = $scope.interviewers;
            for(var i = 0; i < interviewers.length; i++){
                var interviewer = interviewers[i];
                for(var j = 0; j < added.length; j++){
                    if(interviewer._id === added[j]._id){
                        interviewer.added = true;
                    }
                }
            }
        }, function error() {
        }).then(function redirect() {
            // hide row
        });
    };
    $scope.remove = function(id){
        var interviewers = $scope.interviewers;
        for(var i=0; i <interviewers.length; i++){
            var interviewer = interviewers[i];
            if(interviewer._id === id){
                interviewer.added = false;
            }
        }
        var event = $routeParams._id;
        $http.post('api/event/removeInterviewer?_id='+event, {_id: id}).then(function(response){
            console.log(response);
        })
    }
}]);
app.controller('addStudents', ['$scope', '$http', '$routeParams', function($scope, $http, $routeParams){
    $http.get('/api/student').then(function (response) {
        console.log(response);
        $scope.students = response.data;
    });
    $http.get('/api/event?_id='+$routeParams._id).then(function(response){
        var added = response.data[0].students.slice();
        var students = $scope.students;
        for(var i = 0; i < students.length; i++){
            var student = students[i];
            for(var j = 0; j < added.length; j++){
                if(student._id === added[j]._id){
                    student.added = true;
                }
            }
        }
        console.log($scope.added);
        console.log($scope.students);

    });

    var eventParam = $routeParams._id;
    $scope.eventId = eventParam;
    console.log(eventParam);
    console.log($routeParams);

    $scope.addStudent = function(id) {
        $http({
            method: 'POST',
            url: '/api/event/addStudent?_id=' + eventParam,
            data: {_id: id}
        }).then(function success(response) {
            var added = response.data.students.slice();
            var students = $scope.students;
            for(var i = 0; i < students.length; i++){
                var student = students[i];
                for(var j = 0; j < added.length; j++){
                    if(student._id === added[j]._id){
                        student.added = true;
                    }
                }
            }
        }, function error() {
        }).then(function redirect() {
            // hide row
        });
    };
    $scope.remove = function(id){
        var students = $scope.students;
        for(var i=0; i <students.length; i++){
            var student = students[i];
            if(student._id === id){
                student.added = false;
            }
        }
        var event = $routeParams._id;
        $http.post('api/event/removeStudent?_id='+event, {_id: id}).then(function(response){
            console.log(response);
        })
    }
}]);

/*
 View events controller
 */
app.controller('viewEventCtrl', ['$scope', '$http', '$filter', '$routeParams', function($scope, $http, $filter, $routeParams) {

    var eventParam = $routeParams._id;
    $scope.eventId = eventParam;

    $http.get('/api/event?_id=' + eventParam).then(function success(response) {

        $scope.eventTitle = response.data[0].cohort + ' ' + response.data[0].type;
        $scope.eventDate = $filter('date')(new Date(response.data[0].date), 'MM/dd/yy');
        $scope.eventStime = response.data[0].startTime;
        $scope.eventEtime = response.data[0].endTime;
        $scope.eventDur = response.data[0].interviewDuration;
        $scope.eventLoc = typeof response.data[0].location != 'undefined' ? response.data[0].location : 'NA';
        $scope.eventOrg = typeof response.data[0].organizer != 'undefined' ? response.data[0].organizer : 'NA';

    }, function error() {});

}]);
//# sourceMappingURL=data:application/json;base64,
