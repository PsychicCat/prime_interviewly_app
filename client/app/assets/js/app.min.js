var app=angular.module("app",["ngMaterial","ngRoute","ui.grid","ui.grid.edit","ui.grid.rowEdit","ui.grid.exporter"]);app.config(["$routeProvider","$locationProvider",function(e,t){t.html5Mode({enabled:!0}),e.when("/home",{templateUrl:"views/partials/home.html"}).when("/",{templateUrl:"views/partials/login/login.html"}).when("/forgot",{templateUrl:"views/partials/forgot/forgot.html"}).when("/events",{templateUrl:"views/partials/events/events.html"}).when("/students",{templateUrl:"views/partials/students/students.html"}).when("/interviewers",{templateUrl:"views/partials/interviewers/interviewers.html"}).when("/archived-events",{templateUrl:"views/partials/archived-events/archived-events.html"}).when("/profile",{templateUrl:"views/partials/profile/profile.html"}).when("/logout",{templateUrl:"views/partials/logout/logout.html"}).when("/new-event",{templateUrl:"views/partials/new-event/new-event.html"}).when("/event",{templateUrl:"views/partials/event/event.html"}).when("/:token",{templateUrl:"views/partials/reset/reset.html",controller:"reset"}).otherwise({redirectTo:"/views/partials/login.html"})}]),app.controller("student",["$scope","$mdDialog",function(e,t){function o(e){e.close=function(){t.hide(),e.companies=[{name:"Prime"},{name:"Nerdery"},{name:"Digital People"}],e.events=[{name:"mocks Delta"},{name:"career Delta"},{name:"mocks Epsilon"}]}}e.openStudents=function(e){t.show({controller:o,templateUrl:"views/partials/dialogs/student.dialog.html",parent:angular.element(document.body),targetEvent:e,clickOutsideToClose:!0})}}]),app.controller("interviewer",["$scope","$mdDialog",function(e,t){e.openInterviewer=function(e){t.show({controller:"addInterviewer",templateUrl:"views/partials/dialogs/interviewer.dialog.html",parent:angular.element(document.body),targetEvent:e,clickOutsideToClose:!0})}}]),app.controller("uploads",["$scope","$mdDialog",function(e,t){function o(e,t){e.close=function(){t.hide()}}e.openUploads=function(e){t.show({controller:o,templateUrl:"views/partials/dialogs/upload.dialog.html",parent:angular.element(document.body),targetEvent:e,clickOutsideToClose:!0})}}]),app.controller("registerOpen",["$scope","$mdDialog","$http",function(e,t){function o(e,t,o){e.register=function(e,n,a){t.post("/api/users",{username:e,email:n,password:a}).then(function(e){console.log(e),200==e&&o.hide()})},e.close=function(){o.hide()}}e.openRegister=function(e){t.show({controller:o,templateUrl:"views/partials/dialogs/register.dialog.html",parent:angular.element(document.body),targetEvent:e,clickOutsideToClose:!0})}}]),app.controller("sendEmail",["$scope","$http","$location",function(e,t,o){e.send=function(e){t.post("/forgot",{email:e}).then(function(e){200==e.status&&o.path("/")})}}]),app.controller("login",["$rootScope","$scope","$http","$location","$mdToast",function(e,t,o,n,a){t.submit=function(t,r){o.post("/authenticate",{username:t,password:r}).then(function(t){t.data.token?(sessionStorage.username=angular.toJson(t.data.user.username),sessionStorage.email=angular.toJson(t.data.user.email),sessionStorage.token=angular.toJson(t.data.token),n.path("/events"),e.$broadcast("logged In")):a.showSimple(t.data.error)})}}]),app.controller("toolbar",["$rootScope","$scope","$window",function(e,t,o){t.user=o.sessionStorage,t.paths=!0,e.$on("logged In",function(){void 0==o.sessionStorage.token?t.paths=!0:t.paths=!1})}]),app.controller("reset",["$scope","$http","$routeParams","$location",function(e,t,o,n){e.changePass=function(e,a){console.log(e);var r=o.token;e===a&&t.post("/reset",{password:e,token:r}).then(function(e){console.log(e),200===e.status&&n.path("/")})}}]),app.controller("logout",["$rootScope","$scope","$location","$interval",function(e,t,o,n){t.logout=function(){o.path("/logout"),sessionStorage.clear(),e.$broadcast("logged In"),n(function(){o.path("/")},3e3,1)}}]),app.directive("verifySame",function(){return{require:"ngModel",scope:{otherModelValue:"=compareTo"},link:function(e,t,o,n){n.$validators.compareTo=function(t){return t==e.otherModelValue},e.$watch("password",function(){n.$validate()})}}}),angular.module("app").controller("eventsCtrl",function(e){function t(e){var t,o=[];return t=angular.extend({},e),t.title=t.title,t.span={row:1,col:1},t.background="gray",t.span.row=t.span.col=1,o.push(t),o}this.tiles=t({title:"Event Title",background:""})}),app.controller("generateCtrl",["$scope","$http",function(e,t){var o=moment("1:00 PM","h:mm A").format("HH:mm"),n=moment("4:00 PM","h:mm A").format("HH:mm"),a=moment(n,"HH:mm").diff(moment(o,"HH:mm"),"minutes"),r=moment.duration(a/9,"minutes").asMinutes();console.log(moment(o,"HH:mm").add(8*r,"minutes").format("h:mm A"));var l=[],i=[];e.gridOptions={enableSorting:!1,enableGridMenu:!0,enableFiltering:!1,onRegisterApi:function(t){e.gridApi=t}},e.generate=function(){t({method:"GET",url:"http://localhost:3000/test"}).then(function(t){e.gridOptions.columnDefs=[],e.gridOptions.data=[],l=[],i=[],console.log(t),t.data.interviewer.forEach(function(e,t){l.push({name:e.company+" / "+e.fName,field:e.company+"_"+e.name,width:150,displayName:e.company+" / "+e.fName});var o=e.scheduled,n=[];Object.getOwnPropertyNames(o).forEach(function(t,a,r){titleObj={},titleObj[e.company+"_"+e.fname]=o[t],n.push(titleObj)}),i.push(n)}),i=_.unzip(i);var o=[];i.forEach(function(e,t){var n={};e.forEach(function(e,t){_.extend(n,e)}),o.push(n)}),gridObj={};for(var n=[],a=o.length;a--;)n.push({time:"Slot "+(o.length-a)});console.log(n),_.extend(gridObj,o),i=o}).then(function(){e.gridOptions.columnDefs=l,e.gridOptions.data=i})}}]);
//# sourceMappingURL=data:application/json;base64,
