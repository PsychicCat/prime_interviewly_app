var app = angular.module('app', ['ngMaterial', 'ngRoute']);
app.config(['$routeProvider', '$locationProvider', function($routeProvider, $locationProvider){
    $locationProvider.html5Mode({
        enabled: true
    });
    $routeProvider.
        when('/', {
            templateUrl: 'views/partials/login/login.html'
        }).
        when('/forgot', {
            templateUrl: 'views/partials/forgot/forgot.html'
        }).
        when('/events', {
            templateUrl: 'views/partials/events/events.html'
        }).
        when('/students', {
            templateUrl: 'views/partials/students/students.html'
        }).
        when('/interviewers', {
            templateUrl: 'views/partials/interviewers/interviewers.html'
        }).

        when('/archived-events', {
            templateUrl: 'views/partials/archivedEvents/archivedEvents.html'
        }).

        when('/profile', {
            templateUrl: 'views/partials/profile/profile.html'
        }).

        when('/logout', {
            templateUrl: 'views/partials/logout/logout.html'
        }).

        when('/new-event', {
            templateUrl: 'views/partials/new-event/new-event.html'
        }).
        when('/reset/:token', {
            templateUrl: 'views/partials/reset/reset.html',
            controller: 'reset'
        }).
        otherwise({
            redirectTo: '/'
    })
}]);
//Student Dialog Controller
app.controller('student', ['$scope', '$mdDialog', function($scope,$mdDialog){
    $scope.openStudents = function(ev){
        $mdDialog.show({
            controller: addStudent,
            templateUrl: 'views/partials/Dialogs/studentDialog.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose: true
        })
    };
    function addStudent($scope) {
        $scope.close = function () {
            $mdDialog.hide();
            $scope.companies = [
                {name: 'Prime'},
                {name: 'Nerdery'},
                {name: 'Digital People'}
            ];
            $scope.events = [
                {name: 'mocks Delta'},
                {name: 'career Delta'},
                {name: 'mocks Epsilon'}
            ];
        }
    }

}]);
//Interviewer Dialog Controller
app.controller('interviewer', ['$scope', '$mdDialog', function($scope, $mdDialog){
    $scope.openInterviewer = function(ev){
        $mdDialog.show({
            controller: addInterviewer,
            templateUrl: 'views/partials/Dialogs/interviewerDialog.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose: true
        })
    };
    function addInterviewer($scope, $mdDialog){
    $scope.close = function(){
        $mdDialog.hide();
    };
    $scope.cohorts = [
        {name: 'Delta'},
        {name: 'gamma'},
        {name: 'Epsilon'}
    ];
    $scope.events = [
        {name: 'mocks Delta'},
        {name: 'career Delta'},
        {name: 'mocks Epsilon'}
    ]
    }
}]);
//Upload Dialog controller
app.controller('uploads', ['$scope', '$mdDialog', function($scope, $mdDialog){
    $scope.openUploads = function(ev){
        $mdDialog.show({
            controller: uploadFile,
            templateUrl: 'views/partials/Dialogs/uploadDialog.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose: true
        })
    };
    function uploadFile($scope, $mdDialog){
        $scope.close = function() {
            $mdDialog.hide();
        }
    }
}]);
//controller for the registration also sends post to create a user
app.controller('registerOpen', ['$scope', '$mdDialog', '$http', function($scope, $mdDialog){
    $scope.openRegister = function(ev){
        $mdDialog.show({
            controller: register,
            templateUrl: 'views/partials/Dialogs/register.html',
            parent: angular.element(document.body),
            targetEvent: ev,
            clickOutsideToClose: true
        })
    };
    function register($scope, $http, $mdDialog) {
        $scope.register = function(username, email, password){
            $http.post('/api/users', {
                username: username,
                email: email,
                password: password
            }).then(function(response){
                console.log(response);
                if(response == 200) {
                    $mdDialog.hide()
                }
            });
        };
        $scope.close = function(){
            $mdDialog.hide();
        };
    }
}]);
//controller to send reset email
app.controller('sendEmail', ['$scope', '$http', '$location', function($scope, $http, $location){
    $scope.send = function(email) {
        $http.post('/forgot', {email: email}).then(function (response) {
            if (response.status == 200) {
                $location.path('/')
            }
        })
    }
}]);
//controller to send password to authentication and login to website on confirmation
app.controller('login', ['$rootScope','$scope', '$http', '$location', '$mdToast', function($rootScope, $scope, $http, $location, $mdToast){
    $scope.submit = function(username, password){
        $http.post('/authenticate', {username: username, password: password}).then(function(response){
                if(response.data.token){
                    sessionStorage.username = angular.toJson(response.data.user.username);
                    sessionStorage.email = angular.toJson(response.data.user.email);
                    sessionStorage.token = angular.toJson(response.data.token);
                    $location.path('/events');
                    $rootScope.$broadcast('logged In')
                }else{
                    $mdToast.showSimple(response.data.error)
                }

            }

        )
    }
}]);
//controller for main toolbar
app.controller('toolbar', ['$rootScope','$scope', '$window', function($rootScope, $scope, $window){
    $scope.paths = true;
    $rootScope.$on('logged In', function(){
        if($window.sessionStorage.token == undefined){
            $scope.paths = true;
        }else{
            $scope.paths = false;
            $scope.user = {
                username: $window.sessionStorage.username.replace(/^"(.*)"$/, '$1'),
            };
        }
    })
}]);
//controller for the reset form
app.controller('reset',['$scope', '$http', '$routeParams', '$location', function($scope, $http, $routeParams, $location){
    $scope.changePass = function(password, confirm){
        console.log(password);
        var token = $routeParams.token;
        if(password === confirm){
            $http.post('/reset', {password: password, token: token}).then(function(response){
                console.log(response);
                if(response.status === 200){
                    $location.path('/');
                }
            })
        }
    }
}]);
//controller for the logout functionality
app.controller('logout', ['$rootScope', '$scope','$location', '$interval', function($rootScope, $scope, $location, $interval){
    $scope.logout = function(){
        $location.path('/logout');
        sessionStorage.clear();
        $rootScope.$broadcast('logged In');
        $interval(function() {
            $location.path('/')
        }, 3000, 1)
    };
}]);
//Controller for the profile form
app.controller('profile', ['$scope', '$http', '$window', '$location', function($scope, $http, $window, $location){
    $scope.username = $window.sessionStorage.username.replace(/^"(.*)"$/, '$1');
    $scope.email = $window.sessionStorage.email.replace(/^"(.*)"$/, '$1');
    $scope.save = function(password){
        var username = $scope.username;
        var email = $scope.email;
        $http.post('/change', {username: username, email: email, password: password}).then(function(response){
            if(response.status === 200){
                $location.path('/events')
            }
        });
    }
}]);
//directive to check the passwords are the same
app.directive('verifySame', function(){
       return {
           require: "ngModel",
           scope: {
               otherModelValue: "=compareTo"
           },
           link: function(scope, element, attributes, ngModel) {
               ngModel.$validators.compareTo = function(modelValue) {
                   return modelValue == scope.otherModelValue;
               };
               scope.$watch("password", function() {
                   ngModel.$validate();
               });
           }
       };
});
/**
 * Created by vasleckas on 10/13/15.
 */


angular.module('app').controller('eventsCtrl', function($scope) {
        this.tiles = buildGridModel({
            title: "Event Title",
            background: ""
        });
        function buildGridModel(tileTmpl){
            var it, results = [ ];
                it = angular.extend({},tileTmpl);
                it.title = it.title;
                it.span  = { row : 1, col : 1 };
                it.background = "gray";
                it.span.row = it.span.col = 1;

                results.push(it);

            return results;
        }
    });


/**
 * Created by vasleckas on 10/13/15.
 */



//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImFyY2hpdmVkRXZlbnRzL2FyY2hpdmVkRXZlbnRzLmNvbnRyb2xsZXIuanMiLCJpbnRlcnZpZXdlcnMvaW50ZXJ2aWV3ZXJzLmNvbnRyb2xsZXIuanMiLCJldmVudHMvZXZlbnRzQ3RybC5qcyIsIm5ldy1ldmVudC9uZXdldmVudEN0cmwuanMiLCJsb2dvdXQvbG9nb3V0LmNvbnRyb2xsZXIuanMiLCJwcm9maWxlL3Byb2ZpbGUuY29udHJvbGxlci5qcyIsInN0dWRlbnRzL3N0dWRlbnRzLmNvbnRyb2xsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDclBBO0FBQ0E7QUFDQTtBQUNBO0FDSEE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2xCQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FDSEE7QUNBQSIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbJ25nTWF0ZXJpYWwnLCAnbmdSb3V0ZSddKTtcbmFwcC5jb25maWcoWyckcm91dGVQcm92aWRlcicsICckbG9jYXRpb25Qcm92aWRlcicsIGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlcil7XG4gICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHtcbiAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgIH0pO1xuICAgICRyb3V0ZVByb3ZpZGVyLlxuICAgICAgICB3aGVuKCcvJywge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYXJ0aWFscy9sb2dpbi9sb2dpbi5odG1sJ1xuICAgICAgICB9KS5cbiAgICAgICAgd2hlbignL2ZvcmdvdCcsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFydGlhbHMvZm9yZ290L2ZvcmdvdC5odG1sJ1xuICAgICAgICB9KS5cbiAgICAgICAgd2hlbignL2V2ZW50cycsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFydGlhbHMvZXZlbnRzL2V2ZW50cy5odG1sJ1xuICAgICAgICB9KS5cbiAgICAgICAgd2hlbignL3N0dWRlbnRzJywge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYXJ0aWFscy9zdHVkZW50cy9zdHVkZW50cy5odG1sJ1xuICAgICAgICB9KS5cbiAgICAgICAgd2hlbignL2ludGVydmlld2VycycsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFydGlhbHMvaW50ZXJ2aWV3ZXJzL2ludGVydmlld2Vycy5odG1sJ1xuICAgICAgICB9KS5cblxuICAgICAgICB3aGVuKCcvYXJjaGl2ZWQtZXZlbnRzJywge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYXJ0aWFscy9hcmNoaXZlZEV2ZW50cy9hcmNoaXZlZEV2ZW50cy5odG1sJ1xuICAgICAgICB9KS5cblxuICAgICAgICB3aGVuKCcvcHJvZmlsZScsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFydGlhbHMvcHJvZmlsZS9wcm9maWxlLmh0bWwnXG4gICAgICAgIH0pLlxuXG4gICAgICAgIHdoZW4oJy9sb2dvdXQnLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3BhcnRpYWxzL2xvZ291dC9sb2dvdXQuaHRtbCdcbiAgICAgICAgfSkuXG5cbiAgICAgICAgd2hlbignL25ldy1ldmVudCcsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFydGlhbHMvbmV3LWV2ZW50L25ldy1ldmVudC5odG1sJ1xuICAgICAgICB9KS5cbiAgICAgICAgd2hlbignL3Jlc2V0Lzp0b2tlbicsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFydGlhbHMvcmVzZXQvcmVzZXQuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAncmVzZXQnXG4gICAgICAgIH0pLlxuICAgICAgICBvdGhlcndpc2Uoe1xuICAgICAgICAgICAgcmVkaXJlY3RUbzogJy8nXG4gICAgfSlcbn1dKTtcbi8vU3R1ZGVudCBEaWFsb2cgQ29udHJvbGxlclxuYXBwLmNvbnRyb2xsZXIoJ3N0dWRlbnQnLCBbJyRzY29wZScsICckbWREaWFsb2cnLCBmdW5jdGlvbigkc2NvcGUsJG1kRGlhbG9nKXtcbiAgICAkc2NvcGUub3BlblN0dWRlbnRzID0gZnVuY3Rpb24oZXYpe1xuICAgICAgICAkbWREaWFsb2cuc2hvdyh7XG4gICAgICAgICAgICBjb250cm9sbGVyOiBhZGRTdHVkZW50LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYXJ0aWFscy9EaWFsb2dzL3N0dWRlbnREaWFsb2cuaHRtbCcsXG4gICAgICAgICAgICBwYXJlbnQ6IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KSxcbiAgICAgICAgICAgIHRhcmdldEV2ZW50OiBldixcbiAgICAgICAgICAgIGNsaWNrT3V0c2lkZVRvQ2xvc2U6IHRydWVcbiAgICAgICAgfSlcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGFkZFN0dWRlbnQoJHNjb3BlKSB7XG4gICAgICAgICRzY29wZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRtZERpYWxvZy5oaWRlKCk7XG4gICAgICAgICAgICAkc2NvcGUuY29tcGFuaWVzID0gW1xuICAgICAgICAgICAgICAgIHtuYW1lOiAnUHJpbWUnfSxcbiAgICAgICAgICAgICAgICB7bmFtZTogJ05lcmRlcnknfSxcbiAgICAgICAgICAgICAgICB7bmFtZTogJ0RpZ2l0YWwgUGVvcGxlJ31cbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICAkc2NvcGUuZXZlbnRzID0gW1xuICAgICAgICAgICAgICAgIHtuYW1lOiAnbW9ja3MgRGVsdGEnfSxcbiAgICAgICAgICAgICAgICB7bmFtZTogJ2NhcmVlciBEZWx0YSd9LFxuICAgICAgICAgICAgICAgIHtuYW1lOiAnbW9ja3MgRXBzaWxvbid9XG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgfVxuXG59XSk7XG4vL0ludGVydmlld2VyIERpYWxvZyBDb250cm9sbGVyXG5hcHAuY29udHJvbGxlcignaW50ZXJ2aWV3ZXInLCBbJyRzY29wZScsICckbWREaWFsb2cnLCBmdW5jdGlvbigkc2NvcGUsICRtZERpYWxvZyl7XG4gICAgJHNjb3BlLm9wZW5JbnRlcnZpZXdlciA9IGZ1bmN0aW9uKGV2KXtcbiAgICAgICAgJG1kRGlhbG9nLnNob3coe1xuICAgICAgICAgICAgY29udHJvbGxlcjogYWRkSW50ZXJ2aWV3ZXIsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3BhcnRpYWxzL0RpYWxvZ3MvaW50ZXJ2aWV3ZXJEaWFsb2cuaHRtbCcsXG4gICAgICAgICAgICBwYXJlbnQ6IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KSxcbiAgICAgICAgICAgIHRhcmdldEV2ZW50OiBldixcbiAgICAgICAgICAgIGNsaWNrT3V0c2lkZVRvQ2xvc2U6IHRydWVcbiAgICAgICAgfSlcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGFkZEludGVydmlld2VyKCRzY29wZSwgJG1kRGlhbG9nKXtcbiAgICAkc2NvcGUuY2xvc2UgPSBmdW5jdGlvbigpe1xuICAgICAgICAkbWREaWFsb2cuaGlkZSgpO1xuICAgIH07XG4gICAgJHNjb3BlLmNvaG9ydHMgPSBbXG4gICAgICAgIHtuYW1lOiAnRGVsdGEnfSxcbiAgICAgICAge25hbWU6ICdnYW1tYSd9LFxuICAgICAgICB7bmFtZTogJ0Vwc2lsb24nfVxuICAgIF07XG4gICAgJHNjb3BlLmV2ZW50cyA9IFtcbiAgICAgICAge25hbWU6ICdtb2NrcyBEZWx0YSd9LFxuICAgICAgICB7bmFtZTogJ2NhcmVlciBEZWx0YSd9LFxuICAgICAgICB7bmFtZTogJ21vY2tzIEVwc2lsb24nfVxuICAgIF1cbiAgICB9XG59XSk7XG4vL1VwbG9hZCBEaWFsb2cgY29udHJvbGxlclxuYXBwLmNvbnRyb2xsZXIoJ3VwbG9hZHMnLCBbJyRzY29wZScsICckbWREaWFsb2cnLCBmdW5jdGlvbigkc2NvcGUsICRtZERpYWxvZyl7XG4gICAgJHNjb3BlLm9wZW5VcGxvYWRzID0gZnVuY3Rpb24oZXYpe1xuICAgICAgICAkbWREaWFsb2cuc2hvdyh7XG4gICAgICAgICAgICBjb250cm9sbGVyOiB1cGxvYWRGaWxlLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYXJ0aWFscy9EaWFsb2dzL3VwbG9hZERpYWxvZy5odG1sJyxcbiAgICAgICAgICAgIHBhcmVudDogYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmJvZHkpLFxuICAgICAgICAgICAgdGFyZ2V0RXZlbnQ6IGV2LFxuICAgICAgICAgICAgY2xpY2tPdXRzaWRlVG9DbG9zZTogdHJ1ZVxuICAgICAgICB9KVxuICAgIH07XG4gICAgZnVuY3Rpb24gdXBsb2FkRmlsZSgkc2NvcGUsICRtZERpYWxvZyl7XG4gICAgICAgICRzY29wZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJG1kRGlhbG9nLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH1cbn1dKTtcbi8vY29udHJvbGxlciBmb3IgdGhlIHJlZ2lzdHJhdGlvbiBhbHNvIHNlbmRzIHBvc3QgdG8gY3JlYXRlIGEgdXNlclxuYXBwLmNvbnRyb2xsZXIoJ3JlZ2lzdGVyT3BlbicsIFsnJHNjb3BlJywgJyRtZERpYWxvZycsICckaHR0cCcsIGZ1bmN0aW9uKCRzY29wZSwgJG1kRGlhbG9nKXtcbiAgICAkc2NvcGUub3BlblJlZ2lzdGVyID0gZnVuY3Rpb24oZXYpe1xuICAgICAgICAkbWREaWFsb2cuc2hvdyh7XG4gICAgICAgICAgICBjb250cm9sbGVyOiByZWdpc3RlcixcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFydGlhbHMvRGlhbG9ncy9yZWdpc3Rlci5odG1sJyxcbiAgICAgICAgICAgIHBhcmVudDogYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmJvZHkpLFxuICAgICAgICAgICAgdGFyZ2V0RXZlbnQ6IGV2LFxuICAgICAgICAgICAgY2xpY2tPdXRzaWRlVG9DbG9zZTogdHJ1ZVxuICAgICAgICB9KVxuICAgIH07XG4gICAgZnVuY3Rpb24gcmVnaXN0ZXIoJHNjb3BlLCAkaHR0cCwgJG1kRGlhbG9nKSB7XG4gICAgICAgICRzY29wZS5yZWdpc3RlciA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBlbWFpbCwgcGFzc3dvcmQpe1xuICAgICAgICAgICAgJGh0dHAucG9zdCgnL2FwaS91c2VycycsIHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsXG4gICAgICAgICAgICAgICAgZW1haWw6IGVtYWlsLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBwYXNzd29yZFxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIGlmKHJlc3BvbnNlID09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICAkbWREaWFsb2cuaGlkZSgpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5jbG9zZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAkbWREaWFsb2cuaGlkZSgpO1xuICAgICAgICB9O1xuICAgIH1cbn1dKTtcbi8vY29udHJvbGxlciB0byBzZW5kIHJlc2V0IGVtYWlsXG5hcHAuY29udHJvbGxlcignc2VuZEVtYWlsJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnJGxvY2F0aW9uJywgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgJGxvY2F0aW9uKXtcbiAgICAkc2NvcGUuc2VuZCA9IGZ1bmN0aW9uKGVtYWlsKSB7XG4gICAgICAgICRodHRwLnBvc3QoJy9mb3Jnb3QnLCB7ZW1haWw6IGVtYWlsfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cbn1dKTtcbi8vY29udHJvbGxlciB0byBzZW5kIHBhc3N3b3JkIHRvIGF1dGhlbnRpY2F0aW9uIGFuZCBsb2dpbiB0byB3ZWJzaXRlIG9uIGNvbmZpcm1hdGlvblxuYXBwLmNvbnRyb2xsZXIoJ2xvZ2luJywgWyckcm9vdFNjb3BlJywnJHNjb3BlJywgJyRodHRwJywgJyRsb2NhdGlvbicsICckbWRUb2FzdCcsIGZ1bmN0aW9uKCRyb290U2NvcGUsICRzY29wZSwgJGh0dHAsICRsb2NhdGlvbiwgJG1kVG9hc3Qpe1xuICAgICRzY29wZS5zdWJtaXQgPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpe1xuICAgICAgICAkaHR0cC5wb3N0KCcvYXV0aGVudGljYXRlJywge3VzZXJuYW1lOiB1c2VybmFtZSwgcGFzc3dvcmQ6IHBhc3N3b3JkfSkudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgICAgICAgICAgaWYocmVzcG9uc2UuZGF0YS50b2tlbil7XG4gICAgICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnVzZXJuYW1lID0gYW5ndWxhci50b0pzb24ocmVzcG9uc2UuZGF0YS51c2VyLnVzZXJuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2UuZW1haWwgPSBhbmd1bGFyLnRvSnNvbihyZXNwb25zZS5kYXRhLnVzZXIuZW1haWwpO1xuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS50b2tlbiA9IGFuZ3VsYXIudG9Kc29uKHJlc3BvbnNlLmRhdGEudG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2V2ZW50cycpO1xuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2xvZ2dlZCBJbicpXG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICRtZFRvYXN0LnNob3dTaW1wbGUocmVzcG9uc2UuZGF0YS5lcnJvcilcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICApXG4gICAgfVxufV0pO1xuLy9jb250cm9sbGVyIGZvciBtYWluIHRvb2xiYXJcbmFwcC5jb250cm9sbGVyKCd0b29sYmFyJywgWyckcm9vdFNjb3BlJywnJHNjb3BlJywgJyR3aW5kb3cnLCBmdW5jdGlvbigkcm9vdFNjb3BlLCAkc2NvcGUsICR3aW5kb3cpe1xuICAgICRzY29wZS5wYXRocyA9IHRydWU7XG4gICAgJHJvb3RTY29wZS4kb24oJ2xvZ2dlZCBJbicsIGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKCR3aW5kb3cuc2Vzc2lvblN0b3JhZ2UudG9rZW4gPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICRzY29wZS5wYXRocyA9IHRydWU7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgJHNjb3BlLnBhdGhzID0gZmFsc2U7XG4gICAgICAgICAgICAkc2NvcGUudXNlciA9IHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogJHdpbmRvdy5zZXNzaW9uU3RvcmFnZS51c2VybmFtZS5yZXBsYWNlKC9eXCIoLiopXCIkLywgJyQxJyksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSlcbn1dKTtcbi8vY29udHJvbGxlciBmb3IgdGhlIHJlc2V0IGZvcm1cbmFwcC5jb250cm9sbGVyKCdyZXNldCcsWyckc2NvcGUnLCAnJGh0dHAnLCAnJHJvdXRlUGFyYW1zJywgJyRsb2NhdGlvbicsIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uKXtcbiAgICAkc2NvcGUuY2hhbmdlUGFzcyA9IGZ1bmN0aW9uKHBhc3N3b3JkLCBjb25maXJtKXtcbiAgICAgICAgY29uc29sZS5sb2cocGFzc3dvcmQpO1xuICAgICAgICB2YXIgdG9rZW4gPSAkcm91dGVQYXJhbXMudG9rZW47XG4gICAgICAgIGlmKHBhc3N3b3JkID09PSBjb25maXJtKXtcbiAgICAgICAgICAgICRodHRwLnBvc3QoJy9yZXNldCcsIHtwYXNzd29yZDogcGFzc3dvcmQsIHRva2VuOiB0b2tlbn0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICBpZihyZXNwb25zZS5zdGF0dXMgPT09IDIwMCl7XG4gICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cbn1dKTtcbi8vY29udHJvbGxlciBmb3IgdGhlIGxvZ291dCBmdW5jdGlvbmFsaXR5XG5hcHAuY29udHJvbGxlcignbG9nb3V0JywgWyckcm9vdFNjb3BlJywgJyRzY29wZScsJyRsb2NhdGlvbicsICckaW50ZXJ2YWwnLCBmdW5jdGlvbigkcm9vdFNjb3BlLCAkc2NvcGUsICRsb2NhdGlvbiwgJGludGVydmFsKXtcbiAgICAkc2NvcGUubG9nb3V0ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9sb2dvdXQnKTtcbiAgICAgICAgc2Vzc2lvblN0b3JhZ2UuY2xlYXIoKTtcbiAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdsb2dnZWQgSW4nKTtcbiAgICAgICAgJGludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nKVxuICAgICAgICB9LCAzMDAwLCAxKVxuICAgIH07XG59XSk7XG4vL0NvbnRyb2xsZXIgZm9yIHRoZSBwcm9maWxlIGZvcm1cbmFwcC5jb250cm9sbGVyKCdwcm9maWxlJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnJHdpbmRvdycsICckbG9jYXRpb24nLCBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkd2luZG93LCAkbG9jYXRpb24pe1xuICAgICRzY29wZS51c2VybmFtZSA9ICR3aW5kb3cuc2Vzc2lvblN0b3JhZ2UudXNlcm5hbWUucmVwbGFjZSgvXlwiKC4qKVwiJC8sICckMScpO1xuICAgICRzY29wZS5lbWFpbCA9ICR3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZW1haWwucmVwbGFjZSgvXlwiKC4qKVwiJC8sICckMScpO1xuICAgICRzY29wZS5zYXZlID0gZnVuY3Rpb24ocGFzc3dvcmQpe1xuICAgICAgICB2YXIgdXNlcm5hbWUgPSAkc2NvcGUudXNlcm5hbWU7XG4gICAgICAgIHZhciBlbWFpbCA9ICRzY29wZS5lbWFpbDtcbiAgICAgICAgJGh0dHAucG9zdCgnL2NoYW5nZScsIHt1c2VybmFtZTogdXNlcm5hbWUsIGVtYWlsOiBlbWFpbCwgcGFzc3dvcmQ6IHBhc3N3b3JkfSkudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgICAgICBpZihyZXNwb25zZS5zdGF0dXMgPT09IDIwMCl7XG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9ldmVudHMnKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XSk7XG4vL2RpcmVjdGl2ZSB0byBjaGVjayB0aGUgcGFzc3dvcmRzIGFyZSB0aGUgc2FtZVxuYXBwLmRpcmVjdGl2ZSgndmVyaWZ5U2FtZScsIGZ1bmN0aW9uKCl7XG4gICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgcmVxdWlyZTogXCJuZ01vZGVsXCIsXG4gICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICBvdGhlck1vZGVsVmFsdWU6IFwiPWNvbXBhcmVUb1wiXG4gICAgICAgICAgIH0sXG4gICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyaWJ1dGVzLCBuZ01vZGVsKSB7XG4gICAgICAgICAgICAgICBuZ01vZGVsLiR2YWxpZGF0b3JzLmNvbXBhcmVUbyA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9kZWxWYWx1ZSA9PSBzY29wZS5vdGhlck1vZGVsVmFsdWU7XG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKFwicGFzc3dvcmRcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgbmdNb2RlbC4kdmFsaWRhdGUoKTtcbiAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICB9XG4gICAgICAgfTtcbn0pOyIsIi8qKlxuICogQ3JlYXRlZCBieSB2YXNsZWNrYXMgb24gMTAvMTMvMTUuXG4gKi9cbiIsIiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdldmVudHNDdHJsJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgIHRoaXMudGlsZXMgPSBidWlsZEdyaWRNb2RlbCh7XG4gICAgICAgICAgICB0aXRsZTogXCJFdmVudCBUaXRsZVwiLFxuICAgICAgICAgICAgYmFja2dyb3VuZDogXCJcIlxuICAgICAgICB9KTtcbiAgICAgICAgZnVuY3Rpb24gYnVpbGRHcmlkTW9kZWwodGlsZVRtcGwpe1xuICAgICAgICAgICAgdmFyIGl0LCByZXN1bHRzID0gWyBdO1xuICAgICAgICAgICAgICAgIGl0ID0gYW5ndWxhci5leHRlbmQoe30sdGlsZVRtcGwpO1xuICAgICAgICAgICAgICAgIGl0LnRpdGxlID0gaXQudGl0bGU7XG4gICAgICAgICAgICAgICAgaXQuc3BhbiAgPSB7IHJvdyA6IDEsIGNvbCA6IDEgfTtcbiAgICAgICAgICAgICAgICBpdC5iYWNrZ3JvdW5kID0gXCJncmF5XCI7XG4gICAgICAgICAgICAgICAgaXQuc3Bhbi5yb3cgPSBpdC5zcGFuLmNvbCA9IDE7XG5cbiAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goaXQpO1xuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgfVxuICAgIH0pO1xuIiwiIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHZhc2xlY2thcyBvbiAxMC8xMy8xNS5cbiAqL1xuIiwiIiwiIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
